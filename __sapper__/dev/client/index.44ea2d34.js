import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, g as globals, e as element, t as text, a as space, c as claim_element, b as children, f as claim_text, h as detach_dev, j as claim_space, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, o as set_input_value, p as listen_dev, q as set_data_dev, r as noop, u as run_all } from './client.72f7a3fc.js';

/* src/routes/index.svelte generated by Svelte v3.23.2 */

const { console: console_1 } = globals;
const file = "src/routes/index.svelte";

// (136:4) {:else}
function create_else_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("No words entered yet!");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "No words entered yet!");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(136:4) {:else}",
		ctx
	});

	return block;
}

// (134:4) {#if input.length != 0}
function create_if_block(ctx) {
	let t_value = /*formatted_words*/ ctx[2].map(func) + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*formatted_words*/ 4 && t_value !== (t_value = /*formatted_words*/ ctx[2].map(func) + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(134:4) {#if input.length != 0}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div10;
	let header;
	let ul;
	let a;
	let t0;
	let t1;
	let h1;
	let t2;
	let t3;
	let div0;
	let t4;
	let t5;
	let div1;
	let h50;
	let t6;
	let t7;
	let t8;
	let t9;
	let br;
	let t10;
	let form;
	let input0;
	let t11;
	let input1;
	let t12;
	let div3;
	let div2;
	let span0;
	let t13;
	let textarea;
	let t14;
	let div4;
	let button;
	let t15;
	let t16;
	let div9;
	let div8;
	let div5;
	let h51;
	let span1;
	let t17;
	let t18;
	let div7;
	let div6;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*input*/ ctx[0].length != 0) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			div10 = element("div");
			header = element("header");
			ul = element("ul");
			a = element("a");
			t0 = text("Add Words");
			t1 = space();
			h1 = element("h1");
			t2 = text("Spelling Checker");
			t3 = space();
			div0 = element("div");
			t4 = text("All words are correct!");
			t5 = space();
			div1 = element("div");
			h50 = element("h5");
			t6 = text("These words are not in the library:");
			t7 = space();
			t8 = text(/*incorrectWords*/ ctx[1]);
			t9 = space();
			br = element("br");
			t10 = space();
			form = element("form");
			input0 = element("input");
			t11 = space();
			input1 = element("input");
			t12 = space();
			div3 = element("div");
			div2 = element("div");
			span0 = element("span");
			t13 = space();
			textarea = element("textarea");
			t14 = space();
			div4 = element("div");
			button = element("button");
			t15 = text("Check");
			t16 = space();
			div9 = element("div");
			div8 = element("div");
			div5 = element("div");
			h51 = element("h5");
			span1 = element("span");
			t17 = text("Words entered:");
			t18 = space();
			div7 = element("div");
			div6 = element("div");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div10 = claim_element(nodes, "DIV", { class: true });
			var div10_nodes = children(div10);
			header = claim_element(div10_nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			ul = claim_element(header_nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			a = claim_element(ul_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, "Add Words");
			a_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			header_nodes.forEach(detach_dev);
			t1 = claim_space(div10_nodes);
			h1 = claim_element(div10_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t2 = claim_text(h1_nodes, "Spelling Checker");
			h1_nodes.forEach(detach_dev);
			t3 = claim_space(div10_nodes);
			div0 = claim_element(div10_nodes, "DIV", { class: true, role: true });
			var div0_nodes = children(div0);
			t4 = claim_text(div0_nodes, "All words are correct!");
			div0_nodes.forEach(detach_dev);
			t5 = claim_space(div10_nodes);
			div1 = claim_element(div10_nodes, "DIV", { class: true, role: true });
			var div1_nodes = children(div1);
			h50 = claim_element(div1_nodes, "H5", {});
			var h50_nodes = children(h50);
			t6 = claim_text(h50_nodes, "These words are not in the library:");
			h50_nodes.forEach(detach_dev);
			t7 = claim_space(div1_nodes);
			t8 = claim_text(div1_nodes, /*incorrectWords*/ ctx[1]);
			t9 = claim_space(div1_nodes);
			br = claim_element(div1_nodes, "BR", {});
			t10 = claim_space(div1_nodes);
			form = claim_element(div1_nodes, "FORM", { action: true });
			var form_nodes = children(form);
			input0 = claim_element(form_nodes, "INPUT", { type: true, value: true });
			t11 = claim_space(form_nodes);
			input1 = claim_element(form_nodes, "INPUT", { type: true, class: true, value: true });
			form_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t12 = claim_space(div10_nodes);
			div3 = claim_element(div10_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			span0 = claim_element(div2_nodes, "SPAN", {});
			children(span0).forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t13 = claim_space(div3_nodes);

			textarea = claim_element(div3_nodes, "TEXTAREA", {
				class: true,
				"aria-label": true,
				placeholder: true
			});

			children(textarea).forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t14 = claim_space(div10_nodes);
			div4 = claim_element(div10_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			button = claim_element(div4_nodes, "BUTTON", { type: true, class: true });
			var button_nodes = children(button);
			t15 = claim_text(button_nodes, "Check");
			button_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			t16 = claim_space(div10_nodes);
			div9 = claim_element(div10_nodes, "DIV", { id: true });
			var div9_nodes = children(div9);
			div8 = claim_element(div9_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			div5 = claim_element(div8_nodes, "DIV", { class: true, id: true });
			var div5_nodes = children(div5);
			h51 = claim_element(div5_nodes, "H5", { class: true });
			var h51_nodes = children(h51);

			span1 = claim_element(h51_nodes, "SPAN", {
				class: true,
				"data-toggle": true,
				"data-target": true,
				"aria-expanded": true,
				"aria-controls": true
			});

			var span1_nodes = children(span1);
			t17 = claim_text(span1_nodes, "Words entered:");
			span1_nodes.forEach(detach_dev);
			h51_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			t18 = claim_space(div8_nodes);

			div7 = claim_element(div8_nodes, "DIV", {
				id: true,
				class: true,
				"aria-labelledby": true,
				"data-parent": true
			});

			var div7_nodes = children(div7);
			div6 = claim_element(div7_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			if_block.l(div6_nodes);
			div6_nodes.forEach(detach_dev);
			div7_nodes.forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			div9_nodes.forEach(detach_dev);
			div10_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", "/add");
			attr_dev(a, "class", "btn btn-bd-download d-none d-lg-inline-block add-item");
			add_location(a, file, 86, 2, 1495);
			attr_dev(ul, "class", "navbar-nav flex-row ml-md-auto d-none d-md-flex");
			add_location(ul, file, 84, 2, 1430);
			attr_dev(header, "class", "navbar");
			add_location(header, file, 83, 1, 1404);
			attr_dev(h1, "class", "text-center heading");
			add_location(h1, file, 93, 1, 1616);
			attr_dev(div0, "class", "alert alert-success words-status");
			attr_dev(div0, "role", "alert");
			add_location(div0, file, 97, 1, 1707);
			add_location(h50, file, 102, 2, 1852);
			add_location(br, file, 104, 2, 1918);
			attr_dev(input0, "type", "hidden");
			input0.value = "Salam, papalam, xuy, pizda";
			add_location(input0, file, 106, 2, 1949);
			attr_dev(input1, "type", "submit");
			attr_dev(input1, "class", "btn btn-outline-primary submit-btn");
			input1.value = "Add these words";
			add_location(input1, file, 107, 2, 2009);
			attr_dev(form, "action", "/add");
			add_location(form, file, 105, 2, 1926);
			attr_dev(div1, "class", "alert alert-danger");
			attr_dev(div1, "role", "alert");
			add_location(div1, file, 101, 1, 1804);
			add_location(span0, file, 113, 4, 2185);
			attr_dev(div2, "class", "input-group-prepend");
			add_location(div2, file, 112, 2, 2147);
			attr_dev(textarea, "class", "form-control");
			attr_dev(textarea, "aria-label", "With textarea");
			attr_dev(textarea, "placeholder", "Enter your text here.");
			add_location(textarea, file, 115, 2, 2210);
			attr_dev(div3, "class", "input-group");
			add_location(div3, file, 111, 1, 2119);
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "btn btn-outline-primary text-center check-button");
			add_location(button, file, 118, 2, 2390);
			attr_dev(div4, "class", "button-container text-center");
			add_location(div4, file, 117, 1, 2345);
			attr_dev(span1, "class", "btn btn-link svelte-dap1bh");
			attr_dev(span1, "data-toggle", "collapse");
			attr_dev(span1, "data-target", "#collapseOne");
			attr_dev(span1, "aria-expanded", "true");
			attr_dev(span1, "aria-controls", "collapseOne");
			add_location(span1, file, 127, 4, 2671);
			attr_dev(h51, "class", "mb-0");
			add_location(h51, file, 126, 3, 2649);
			attr_dev(div5, "class", "card-header");
			attr_dev(div5, "id", "headingOne");
			add_location(div5, file, 125, 3, 2604);
			attr_dev(div6, "class", "card-body");
			add_location(div6, file, 132, 3, 2944);
			attr_dev(div7, "id", "collapseOne");
			attr_dev(div7, "class", "collapse show");
			attr_dev(div7, "aria-labelledby", "headingOne");
			attr_dev(div7, "data-parent", "#accordion");
			add_location(div7, file, 131, 3, 2842);
			attr_dev(div8, "class", "card");
			add_location(div8, file, 124, 2, 2582);
			attr_dev(div9, "id", "accordion");
			add_location(div9, file, 123, 1, 2559);
			attr_dev(div10, "class", "container");
			add_location(div10, file, 81, 0, 1362);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div10, anchor);
			append_dev(div10, header);
			append_dev(header, ul);
			append_dev(ul, a);
			append_dev(a, t0);
			append_dev(div10, t1);
			append_dev(div10, h1);
			append_dev(h1, t2);
			append_dev(div10, t3);
			append_dev(div10, div0);
			append_dev(div0, t4);
			append_dev(div10, t5);
			append_dev(div10, div1);
			append_dev(div1, h50);
			append_dev(h50, t6);
			append_dev(div1, t7);
			append_dev(div1, t8);
			append_dev(div1, t9);
			append_dev(div1, br);
			append_dev(div1, t10);
			append_dev(div1, form);
			append_dev(form, input0);
			append_dev(form, t11);
			append_dev(form, input1);
			append_dev(div10, t12);
			append_dev(div10, div3);
			append_dev(div3, div2);
			append_dev(div2, span0);
			append_dev(div3, t13);
			append_dev(div3, textarea);
			set_input_value(textarea, /*input*/ ctx[0]);
			append_dev(div10, t14);
			append_dev(div10, div4);
			append_dev(div4, button);
			append_dev(button, t15);
			append_dev(div10, t16);
			append_dev(div10, div9);
			append_dev(div9, div8);
			append_dev(div8, div5);
			append_dev(div5, h51);
			append_dev(h51, span1);
			append_dev(span1, t17);
			append_dev(div8, t18);
			append_dev(div8, div7);
			append_dev(div7, div6);
			if_block.m(div6, null);

			if (!mounted) {
				dispose = [
					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[4]),
					listen_dev(button, "click", /*checkWords*/ ctx[3], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*incorrectWords*/ 2) set_data_dev(t8, /*incorrectWords*/ ctx[1]);

			if (dirty & /*input*/ 1) {
				set_input_value(textarea, /*input*/ ctx[0]);
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div6, null);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div10);
			if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const func = word => " " + word;

function instance($$self, $$props, $$invalidate) {
	let input = "";
	let incorrectWords = "";

	let getLettersOnly = word => {
		// Replace all non-numeric 
		return word.replace(/[^a-zA-Z_]/g, "").toLowerCase();
	};

	let splitWords = words => {
		// Use regular expression to split by comma or whitespace
		return words.split(/[. ,:]+/);
	}; // return words.split(/(?:,| )+/);  found this on the web 

	let formatWords = str => {
		return splitWords(str).map(getLettersOnly).filter(Boolean);
	};

	let checkWords = () => {
		// async request 
		fetch("/check", {
			method: "POST",
			headers: {
				"Accept": "application/json, text/plain, */*",
				"Content-Type": "application/json"
			},
			body: JSON.stringify(words_json)
		}).then(response => response.json()).then(data => {
			console.log(data);

			if (data.allCorrect) {
				// show all words correct
				console.log("All words correct");
			} else {
				// show incorrect words 
				$$invalidate(1, incorrectWords = data.incorrectWords.map(word => " " + word));
			}
		}).catch(error => {
			console.error("Error:", error);
		});
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);

	function textarea_input_handler() {
		input = this.value;
		$$invalidate(0, input);
	}

	$$self.$capture_state = () => ({
		input,
		incorrectWords,
		getLettersOnly,
		splitWords,
		formatWords,
		checkWords,
		formatted_words,
		words_json
	});

	$$self.$inject_state = $$props => {
		if ("input" in $$props) $$invalidate(0, input = $$props.input);
		if ("incorrectWords" in $$props) $$invalidate(1, incorrectWords = $$props.incorrectWords);
		if ("getLettersOnly" in $$props) getLettersOnly = $$props.getLettersOnly;
		if ("splitWords" in $$props) splitWords = $$props.splitWords;
		if ("formatWords" in $$props) $$invalidate(8, formatWords = $$props.formatWords);
		if ("checkWords" in $$props) $$invalidate(3, checkWords = $$props.checkWords);
		if ("formatted_words" in $$props) $$invalidate(2, formatted_words = $$props.formatted_words);
		if ("words_json" in $$props) words_json = $$props.words_json;
	};

	let formatted_words;
	let words_json;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*input*/ 1) {
			 $$invalidate(2, formatted_words = formatWords(input));
		}

		if ($$self.$$.dirty & /*formatted_words*/ 4) {
			 words_json = { "words": formatted_words };
		}
	};

	return [input, incorrectWords, formatted_words, checkWords, textarea_input_handler];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguNDRlYTJkMzQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIlxuPHNjcmlwdD5cbmxldCBpbnB1dCA9ICcnO1xubGV0IGluY29ycmVjdFdvcmRzID0gJyc7XG5cbmxldCBnZXRMZXR0ZXJzT25seSA9ICh3b3JkKSA9PiB7XG5cdC8vIFJlcGxhY2UgYWxsIG5vbi1udW1lcmljIFxuXHRyZXR1cm4gd29yZC5yZXBsYWNlKC9bXmEtekEtWl9dL2csICcnKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5sZXQgc3BsaXRXb3JkcyA9ICh3b3JkcykgPT4ge1xuXHQvLyBVc2UgcmVndWxhciBleHByZXNzaW9uIHRvIHNwbGl0IGJ5IGNvbW1hIG9yIHdoaXRlc3BhY2Vcblx0cmV0dXJuIHdvcmRzLnNwbGl0KC9bLiAsOl0rLylcblx0Ly8gcmV0dXJuIHdvcmRzLnNwbGl0KC8oPzosfCApKy8pOyAgZm91bmQgdGhpcyBvbiB0aGUgd2ViIFxufVxuXG5cbmxldCBmb3JtYXRXb3JkcyA9IChzdHIpID0+IHtcblx0cmV0dXJuIHNwbGl0V29yZHMoc3RyKS5tYXAoZ2V0TGV0dGVyc09ubHkpLmZpbHRlcihCb29sZWFuKTtcbn1cbiQ6IGZvcm1hdHRlZF93b3JkcyA9IGZvcm1hdFdvcmRzKGlucHV0KTtcblxuJDogd29yZHNfanNvbiA9IHtcIndvcmRzXCIgOiBmb3JtYXR0ZWRfd29yZHN9O1xuXG5sZXQgY2hlY2tXb3JkcyA9ICgpID0+IHtcbiAgICAvLyBhc3luYyByZXF1ZXN0IFxuICAgIGZldGNoKCcvY2hlY2snLCB7XG5cdFx0bWV0aG9kOiAnUE9TVCcsICBcblx0XHRoZWFkZXJzOiB7XG5cdFx0J0FjY2VwdCcgOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJywgXG5cdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiBcdFx0fSwgIFxuXHRcdGJvZHk6IEpTT04uc3RyaW5naWZ5KHdvcmRzX2pzb24pXG5cdH0pXG5cdC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcblx0LnRoZW4oZGF0YSA9PiB7XG5cdFx0Y29uc29sZS5sb2coZGF0YSk7XG5cdFx0aWYgKGRhdGEuYWxsQ29ycmVjdCl7XG5cdFx0XHQvLyBzaG93IGFsbCB3b3JkcyBjb3JyZWN0XG5cdFx0XHRjb25zb2xlLmxvZyhcIkFsbCB3b3JkcyBjb3JyZWN0XCIpXG5cdFx0fVxuXHRcdGVsc2V7XG5cdFx0XHQvLyBzaG93IGluY29ycmVjdCB3b3JkcyBcblx0XHRcdGluY29ycmVjdFdvcmRzID0gZGF0YS5pbmNvcnJlY3RXb3Jkcy5tYXAoKHdvcmQpID0+IFwiIFwiICsgd29yZCk7XG5cdFx0fVxuXG5cdH0pXG5cdC5jYXRjaCgoZXJyb3IpID0+IHtcblx0XHRjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvcik7XG5cdH0pO1xufVxuIFxuXG5cbjwvc2NyaXB0PlxuXG5cbjxzdHlsZT5cblxuLmJ0bi5idG4tbGlua3tcblx0Y29sb3I6ICMwMDdiZmY7XG59XG5cbi5idG4uYnRuLWxpbms6aG92ZXJ7XG5cdGJhY2tncm91bmQ6ICNmOGY4Zjg7XG59XG5cbi5idG4uYnRuLWxpbms6YWN0aXZle1xuXHRiYWNrZ3JvdW5kOiAjZjhmOGY4OyBcbn1cbi5idG4uYnRuLWxpbms6Zm9jdXN7XG5cdGJhY2tncm91bmQ6ICNmOGY4Zjg7XG5cdGJvcmRlcjogbm9uZTtcblx0Ym94LXNoYWRvdzogbm9uZTtcbn1cblxuXG5cbiBcbjwvc3R5bGU+XG5cbjxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICBcblx0PGhlYWRlciBjbGFzcz1cIm5hdmJhclwiPlxuXHRcdDx1bCBjbGFzcz1cIm5hdmJhci1uYXYgZmxleC1yb3cgbWwtbWQtYXV0byBkLW5vbmUgZC1tZC1mbGV4XCI+IFxuXG5cdFx0PGEgaHJlZj1cIi9hZGRcIiBjbGFzcz1cImJ0biBidG4tYmQtZG93bmxvYWQgZC1ub25lIGQtbGctaW5saW5lLWJsb2NrIGFkZC1pdGVtXCI+XG5cdFx0XHRBZGQgV29yZHMgXG5cdFx0PC9hPlxuXHRcdDwvdWw+XG5cdDwvaGVhZGVyPlxuXG5cblx0PGgxIGNsYXNzPVwidGV4dC1jZW50ZXIgaGVhZGluZ1wiPlNwZWxsaW5nIENoZWNrZXI8L2gxPlxuXHQ8IS0tIElmIGFsbCB3b3JkcyBhcmUgcmlnaHQ6IC0tPlxuXG5cblx0PGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3Mgd29yZHMtc3RhdHVzXCIgcm9sZT1cImFsZXJ0XCI+XG5cdFx0QWxsIHdvcmRzIGFyZSBjb3JyZWN0IVxuXHQ8L2Rpdj5cblx0XHRcblx0PGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiIHJvbGU9XCJhbGVydFwiPlxuXHRcdDxoNT5UaGVzZSB3b3JkcyBhcmUgbm90IGluIHRoZSBsaWJyYXJ5OjwvaDU+XG5cdFx0e2luY29ycmVjdFdvcmRzfVxuXHRcdDxicj4gXG5cdFx0PGZvcm0gYWN0aW9uPVwiL2FkZFwiPlxuXHRcdDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgdmFsdWU9XCJTYWxhbSwgcGFwYWxhbSwgeHV5LCBwaXpkYVwiID5cblx0XHQ8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgc3VibWl0LWJ0blwiIHZhbHVlPVwiQWRkIHRoZXNlIHdvcmRzXCI+XG5cdFx0PC9mb3JtPiBcblx0PC9kaXY+XG5cblx0PGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+XG5cdFx0PGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLXByZXBlbmRcIj5cblx0XHQgIDxzcGFuPjwvc3Bhbj5cblx0XHQ8L2Rpdj5cblx0XHQ8dGV4dGFyZWEgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBiaW5kOnZhbHVlPXtpbnB1dH0gYXJpYS1sYWJlbD1cIldpdGggdGV4dGFyZWFcIiBwbGFjZWhvbGRlcj1cIkVudGVyIHlvdXIgdGV4dCBoZXJlLlwiPjwvdGV4dGFyZWE+XG5cdDwvZGl2PiBcblx0PGRpdiBjbGFzcz1cImJ1dHRvbi1jb250YWluZXIgdGV4dC1jZW50ZXJcIj5cblx0XHQ8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IHRleHQtY2VudGVyIGNoZWNrLWJ1dHRvblwiIG9uOmNsaWNrPXtjaGVja1dvcmRzfT5DaGVjazwvYnV0dG9uPlxuXHQ8L2Rpdj5cblxuXG5cdDwhLS0gU2hvdyBvbmx5IGlmIHdvcmRzIGFyZSBlbnRlcmVkIC0tPiBcblx0PGRpdiBpZD1cImFjY29yZGlvblwiPlxuXHRcdDxkaXYgY2xhc3M9XCJjYXJkXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY2FyZC1oZWFkZXJcIiBpZD1cImhlYWRpbmdPbmVcIj5cblx0XHRcdDxoNSBjbGFzcz1cIm1iLTBcIj5cblx0XHRcdFx0PHNwYW4gY2xhc3M9XCJidG4gYnRuLWxpbmtcIiBkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCIgZGF0YS10YXJnZXQ9XCIjY29sbGFwc2VPbmVcIiBhcmlhLWV4cGFuZGVkPVwidHJ1ZVwiIGFyaWEtY29udHJvbHM9XCJjb2xsYXBzZU9uZVwiPldvcmRzIGVudGVyZWQ6PC9zcGFuPlxuXHRcdFx0PC9oNT5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8ZGl2IGlkPVwiY29sbGFwc2VPbmVcIiBjbGFzcz1cImNvbGxhcHNlIHNob3dcIiBhcmlhLWxhYmVsbGVkYnk9XCJoZWFkaW5nT25lXCIgZGF0YS1wYXJlbnQ9XCIjYWNjb3JkaW9uXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG5cdFx0XHRcdHsjaWYgaW5wdXQubGVuZ3RoICE9IDB9XG5cdFx0XHRcdHtmb3JtYXR0ZWRfd29yZHMubWFwKCh3b3JkKSA9PiBcIiBcIiArIHdvcmQpfVxuXHRcdFx0XHR7OmVsc2V9XG5cdFx0XHRcdE5vIHdvcmRzIGVudGVyZWQgeWV0IVxuXHRcdFx0XHR7L2lmfVxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0PC9kaXY+IFxuXHRcblxuXG5cbjwvZGl2PiAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQ0FzSUssR0FBZSxJQUFDLEdBQUc7Ozs7Ozs7Ozs7Ozs7O21GQUFuQixHQUFlLElBQUMsR0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnQkFEZixHQUFLLElBQUMsTUFBTSxJQUFJLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0NBOUJ2QixHQUFjOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrREFBZCxHQUFjOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dUNBWTRCLEdBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dEQUd5QyxHQUFVOzs7Ozs7O3lFQWZsRyxHQUFjOzs7d0NBWTRCLEdBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzthQW1CeEIsSUFBSSxJQUFLLEdBQUcsR0FBRyxJQUFJOzs7S0FwSXpDLEtBQUssR0FBRyxFQUFFO0tBQ1YsY0FBYyxHQUFHLEVBQUU7O0tBRW5CLGNBQWMsR0FBSSxJQUFJOztTQUVsQixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxFQUFFLEVBQUUsV0FBVzs7O0tBRy9DLFVBQVUsR0FBSSxLQUFLOztTQUVmLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUzs7O0tBS3pCLFdBQVcsR0FBSSxHQUFHO1NBQ2QsVUFBVSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxPQUFPOzs7S0FNdEQsVUFBVTs7RUFFVixLQUFLLENBQUMsUUFBUTtHQUNoQixNQUFNLEVBQUUsTUFBTTtHQUNkLE9BQU87SUFDUCxRQUFRLEVBQUcsbUNBQW1DO0lBQzlDLGNBQWMsRUFBRSxrQkFBa0I7O0dBRWxDLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVU7S0FFL0IsSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsSUFBSSxJQUM5QixJQUFJLENBQUMsSUFBSTtHQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSTs7T0FDWixJQUFJLENBQUMsVUFBVTs7SUFFbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUI7OztvQkFJL0IsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFFLElBQUksSUFBSyxHQUFHLEdBQUcsSUFBSTs7S0FJOUQsS0FBSyxDQUFFLEtBQUs7R0FDWixPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLOzs7Ozs7Ozs7Ozs7OztFQW1FYyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkEvRi9DLGVBQWUsR0FBRyxXQUFXLENBQUMsS0FBSzs7OztJQUVuQyxVQUFVLEtBQUksT0FBTyxFQUFHLGVBQWU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
