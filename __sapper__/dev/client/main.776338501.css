h1.svelte-1rg2kx5{margin:0 auto}h1.svelte-1rg2kx5{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}@media(min-width: 480px){h1.svelte-1rg2kx5{font-size:4em}}.container.svelte-1rg2kx5{margin-top:100px}
.btn.btn-link.svelte-dap1bh{color:#007bff}.btn.btn-link.svelte-dap1bh:hover{background:#f8f8f8}.btn.btn-link.svelte-dap1bh:active{background:#f8f8f8}.btn.btn-link.svelte-dap1bh:focus{background:#f8f8f8;border:none;box-shadow:none}
a.btn.btn-link.svelte-1q1ggqx{color:#007bff}a.btn.btn-link.svelte-1q1ggqx:hover{background:#f8f8f8}a.btn.btn-link.svelte-1q1ggqx:active{background:#f8f8f8}a.btn.btn-link.svelte-1q1ggqx:focus{background:#f8f8f8;border:none;box-shadow:none}
.content.svelte-gnxal1 h2{font-size:1.4em;font-weight:500}.content.svelte-gnxal1 pre{background-color:#f9f9f9;box-shadow:inset 1px 1px 5px rgba(0,0,0,0.05);padding:0.5em;border-radius:2px;overflow-x:auto}.content.svelte-gnxal1 pre code{background-color:transparent;padding:0}.content.svelte-gnxal1 ul{line-height:1.5}.content.svelte-gnxal1 li{margin:0 0 0.5em 0}
ul.svelte-1frg2tf{margin:0 0 1em 0;line-height:1.5}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */