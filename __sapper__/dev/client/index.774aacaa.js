import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, g as globals, e as element, t as text, c as claim_element, a as children, b as claim_text, f as detach_dev, h as attr_dev, j as add_location, k as insert_dev, l as append_dev, m as add_render_callback, n as create_bidirectional_transition, o as space, p as claim_space, q as set_data_dev, r as prop_dev, u as set_input_value, w as listen_dev, x as transition_in, y as transition_out, z as check_outros, A as run_all, B as group_outros, C as noop } from './client.72aef67d.js';
import { s as slide, f as fade } from './index.c5650103.js';

/* src/routes/index.svelte generated by Svelte v3.23.2 */

const { console: console_1 } = globals;
const file = "src/routes/index.svelte";

// (107:1) {#if displayCorrect}
function create_if_block_2(ctx) {
	let div;
	let t;
	let div_transition;
	let current;

	const block = {
		c: function create() {
			div = element("div");
			t = text("All words are correct!");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, role: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, "All words are correct!");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "alert alert-success words-status");
			attr_dev(div, "role", "alert");
			add_location(div, file, 107, 2, 1912);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
			current = true;
		},
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, true);
				div_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, false);
			div_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching && div_transition) div_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(107:1) {#if displayCorrect}",
		ctx
	});

	return block;
}

// (113:1) {#if displayIncorrect}
function create_if_block_1(ctx) {
	let div;
	let h5;
	let t0;
	let t1;
	let t2_value = /*incorrectWords*/ ctx[1].map(func) + "";
	let t2;
	let t3;
	let br;
	let t4;
	let form;
	let input0;
	let t5;
	let input1;
	let div_transition;
	let current;

	const block = {
		c: function create() {
			div = element("div");
			h5 = element("h5");
			t0 = text("These words are not in the library:");
			t1 = space();
			t2 = text(t2_value);
			t3 = space();
			br = element("br");
			t4 = space();
			form = element("form");
			input0 = element("input");
			t5 = space();
			input1 = element("input");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, role: true });
			var div_nodes = children(div);
			h5 = claim_element(div_nodes, "H5", {});
			var h5_nodes = children(h5);
			t0 = claim_text(h5_nodes, "These words are not in the library:");
			h5_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			t2 = claim_text(div_nodes, t2_value);
			t3 = claim_space(div_nodes);
			br = claim_element(div_nodes, "BR", {});
			t4 = claim_space(div_nodes);
			form = claim_element(div_nodes, "FORM", { action: true, method: true });
			var form_nodes = children(form);
			input0 = claim_element(form_nodes, "INPUT", { type: true, name: true, value: true });
			t5 = claim_space(form_nodes);
			input1 = claim_element(form_nodes, "INPUT", { type: true, class: true, value: true });
			form_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h5, file, 114, 3, 2122);
			add_location(br, file, 116, 3, 2216);
			attr_dev(input0, "type", "hidden");
			attr_dev(input0, "name", "words");
			input0.value = /*incorrectWords*/ ctx[1];
			add_location(input0, file, 118, 4, 2264);
			attr_dev(input1, "type", "submit");
			attr_dev(input1, "class", "btn btn-outline-primary submit-btn");
			input1.value = "Add these words immediately";
			add_location(input1, file, 119, 4, 2326);
			attr_dev(form, "action", "/add");
			attr_dev(form, "method", "POST");
			add_location(form, file, 117, 3, 2225);
			attr_dev(div, "class", "alert alert-danger");
			attr_dev(div, "role", "alert");
			add_location(div, file, 113, 2, 2057);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h5);
			append_dev(h5, t0);
			append_dev(div, t1);
			append_dev(div, t2);
			append_dev(div, t3);
			append_dev(div, br);
			append_dev(div, t4);
			append_dev(div, form);
			append_dev(form, input0);
			append_dev(form, t5);
			append_dev(form, input1);
			current = true;
		},
		p: function update(ctx, dirty) {
			if ((!current || dirty & /*incorrectWords*/ 2) && t2_value !== (t2_value = /*incorrectWords*/ ctx[1].map(func) + "")) set_data_dev(t2, t2_value);

			if (!current || dirty & /*incorrectWords*/ 2) {
				prop_dev(input0, "value", /*incorrectWords*/ ctx[1]);
			}
		},
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, true);
				div_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, false);
			div_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching && div_transition) div_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(113:1) {#if displayIncorrect}",
		ctx
	});

	return block;
}

// (150:4) {:else}
function create_else_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("No words entered yet!");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "No words entered yet!");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(150:4) {:else}",
		ctx
	});

	return block;
}

// (148:4) {#if input.length != 0}
function create_if_block(ctx) {
	let t_value = /*formatted_words*/ ctx[4].map(func_1) + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*formatted_words*/ 16 && t_value !== (t_value = /*formatted_words*/ ctx[4].map(func_1) + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(148:4) {#if input.length != 0}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div8;
	let header;
	let ul;
	let a;
	let t0;
	let t1;
	let h1;
	let t2;
	let t3;
	let t4;
	let t5;
	let div1;
	let div0;
	let span0;
	let t6;
	let textarea;
	let t7;
	let div2;
	let button;
	let t8;
	let t9;
	let div7;
	let div6;
	let div3;
	let h5;
	let span1;
	let t10;
	let t11;
	let div5;
	let div4;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*displayCorrect*/ ctx[2] && create_if_block_2(ctx);
	let if_block1 = /*displayIncorrect*/ ctx[3] && create_if_block_1(ctx);

	function select_block_type(ctx, dirty) {
		if (/*input*/ ctx[0].length != 0) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block2 = current_block_type(ctx);

	const block = {
		c: function create() {
			div8 = element("div");
			header = element("header");
			ul = element("ul");
			a = element("a");
			t0 = text("Add Words");
			t1 = space();
			h1 = element("h1");
			t2 = text("Spelling Checker");
			t3 = space();
			if (if_block0) if_block0.c();
			t4 = space();
			if (if_block1) if_block1.c();
			t5 = space();
			div1 = element("div");
			div0 = element("div");
			span0 = element("span");
			t6 = space();
			textarea = element("textarea");
			t7 = space();
			div2 = element("div");
			button = element("button");
			t8 = text("Check");
			t9 = space();
			div7 = element("div");
			div6 = element("div");
			div3 = element("div");
			h5 = element("h5");
			span1 = element("span");
			t10 = text("Words entered:");
			t11 = space();
			div5 = element("div");
			div4 = element("div");
			if_block2.c();
			this.h();
		},
		l: function claim(nodes) {
			div8 = claim_element(nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			header = claim_element(div8_nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			ul = claim_element(header_nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			a = claim_element(ul_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, "Add Words");
			a_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			header_nodes.forEach(detach_dev);
			t1 = claim_space(div8_nodes);
			h1 = claim_element(div8_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t2 = claim_text(h1_nodes, "Spelling Checker");
			h1_nodes.forEach(detach_dev);
			t3 = claim_space(div8_nodes);
			if (if_block0) if_block0.l(div8_nodes);
			t4 = claim_space(div8_nodes);
			if (if_block1) if_block1.l(div8_nodes);
			t5 = claim_space(div8_nodes);
			div1 = claim_element(div8_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			span0 = claim_element(div0_nodes, "SPAN", {});
			children(span0).forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t6 = claim_space(div1_nodes);

			textarea = claim_element(div1_nodes, "TEXTAREA", {
				class: true,
				"aria-label": true,
				placeholder: true
			});

			children(textarea).forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t7 = claim_space(div8_nodes);
			div2 = claim_element(div8_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			button = claim_element(div2_nodes, "BUTTON", { type: true, class: true });
			var button_nodes = children(button);
			t8 = claim_text(button_nodes, "Check");
			button_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t9 = claim_space(div8_nodes);
			div7 = claim_element(div8_nodes, "DIV", { id: true });
			var div7_nodes = children(div7);
			div6 = claim_element(div7_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div3 = claim_element(div6_nodes, "DIV", { class: true, id: true });
			var div3_nodes = children(div3);
			h5 = claim_element(div3_nodes, "H5", { class: true });
			var h5_nodes = children(h5);

			span1 = claim_element(h5_nodes, "SPAN", {
				class: true,
				"data-toggle": true,
				"data-target": true,
				"aria-expanded": true,
				"aria-controls": true
			});

			var span1_nodes = children(span1);
			t10 = claim_text(span1_nodes, "Words entered:");
			span1_nodes.forEach(detach_dev);
			h5_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t11 = claim_space(div6_nodes);

			div5 = claim_element(div6_nodes, "DIV", {
				id: true,
				class: true,
				"aria-labelledby": true,
				"data-parent": true
			});

			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			if_block2.l(div4_nodes);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			div7_nodes.forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", "/add");
			attr_dev(a, "class", "btn btn-bd-download d-none d-lg-inline-block add-item");
			add_location(a, file, 96, 2, 1678);
			attr_dev(ul, "class", "navbar-nav flex-row ml-md-auto d-none d-md-flex");
			add_location(ul, file, 94, 2, 1613);
			attr_dev(header, "class", "navbar");
			add_location(header, file, 93, 1, 1587);
			attr_dev(h1, "class", "text-center heading");
			add_location(h1, file, 103, 1, 1799);
			add_location(span0, file, 127, 4, 2524);
			attr_dev(div0, "class", "input-group-prepend");
			add_location(div0, file, 126, 2, 2486);
			attr_dev(textarea, "class", "form-control");
			attr_dev(textarea, "aria-label", "With textarea");
			attr_dev(textarea, "placeholder", "Enter your text here.");
			add_location(textarea, file, 129, 2, 2549);
			attr_dev(div1, "class", "input-group");
			add_location(div1, file, 125, 1, 2458);
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "btn btn-outline-primary text-center check-button");
			add_location(button, file, 132, 2, 2729);
			attr_dev(div2, "class", "button-container text-center");
			add_location(div2, file, 131, 1, 2684);
			attr_dev(span1, "class", "btn btn-link svelte-dap1bh");
			attr_dev(span1, "data-toggle", "collapse");
			attr_dev(span1, "data-target", "#collapseOne");
			attr_dev(span1, "aria-expanded", "true");
			attr_dev(span1, "aria-controls", "collapseOne");
			add_location(span1, file, 141, 4, 3010);
			attr_dev(h5, "class", "mb-0");
			add_location(h5, file, 140, 3, 2988);
			attr_dev(div3, "class", "card-header");
			attr_dev(div3, "id", "headingOne");
			add_location(div3, file, 139, 3, 2943);
			attr_dev(div4, "class", "card-body");
			add_location(div4, file, 146, 3, 3283);
			attr_dev(div5, "id", "collapseOne");
			attr_dev(div5, "class", "collapse show");
			attr_dev(div5, "aria-labelledby", "headingOne");
			attr_dev(div5, "data-parent", "#accordion");
			add_location(div5, file, 145, 3, 3181);
			attr_dev(div6, "class", "card");
			add_location(div6, file, 138, 2, 2921);
			attr_dev(div7, "id", "accordion");
			add_location(div7, file, 137, 1, 2898);
			attr_dev(div8, "class", "container");
			add_location(div8, file, 91, 0, 1545);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div8, anchor);
			append_dev(div8, header);
			append_dev(header, ul);
			append_dev(ul, a);
			append_dev(a, t0);
			append_dev(div8, t1);
			append_dev(div8, h1);
			append_dev(h1, t2);
			append_dev(div8, t3);
			if (if_block0) if_block0.m(div8, null);
			append_dev(div8, t4);
			if (if_block1) if_block1.m(div8, null);
			append_dev(div8, t5);
			append_dev(div8, div1);
			append_dev(div1, div0);
			append_dev(div0, span0);
			append_dev(div1, t6);
			append_dev(div1, textarea);
			set_input_value(textarea, /*input*/ ctx[0]);
			append_dev(div8, t7);
			append_dev(div8, div2);
			append_dev(div2, button);
			append_dev(button, t8);
			append_dev(div8, t9);
			append_dev(div8, div7);
			append_dev(div7, div6);
			append_dev(div6, div3);
			append_dev(div3, h5);
			append_dev(h5, span1);
			append_dev(span1, t10);
			append_dev(div6, t11);
			append_dev(div6, div5);
			append_dev(div5, div4);
			if_block2.m(div4, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[6]),
					listen_dev(button, "click", /*checkWords*/ ctx[5], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (/*displayCorrect*/ ctx[2]) {
				if (if_block0) {
					if (dirty & /*displayCorrect*/ 4) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div8, t4);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*displayIncorrect*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*displayIncorrect*/ 8) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div8, t5);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (dirty & /*input*/ 1) {
				set_input_value(textarea, /*input*/ ctx[0]);
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block2) {
				if_block2.p(ctx, dirty);
			} else {
				if_block2.d(1);
				if_block2 = current_block_type(ctx);

				if (if_block2) {
					if_block2.c();
					if_block2.m(div4, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div8);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if_block2.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const func = word => " " + word;
const func_1 = word => " " + word;

function instance($$self, $$props, $$invalidate) {
	let input = "";
	let incorrectWords = "";

	let getLettersOnly = word => {
		// Replace all non-numeric 
		return word.replace(/[^a-zA-Z_]/g, "").toLowerCase();
	};

	let splitWords = words => {
		// Use regular expression to split by comma or whitespace
		return words.split(/[. ,:]+/);
	}; // return words.split(/(?:,| )+/);  found this on the web 

	let formatWords = str => {
		return splitWords(str).map(getLettersOnly).filter(Boolean);
	};

	let displayCorrect = false;
	let displayIncorrect = false;

	let checkWords = () => {
		// async request 
		fetch("/check", {
			method: "POST",
			headers: {
				"Accept": "application/json, text/plain, */*",
				"Content-Type": "application/json"
			},
			body: JSON.stringify(words_json)
		}).then(response => response.json()).then(data => {
			console.log(data);

			if (data.allCorrect) {
				$$invalidate(2, displayCorrect = true);
				$$invalidate(3, displayIncorrect = false);

				// show all words correct
				console.log("All words correct");
			} else {
				$$invalidate(2, displayCorrect = false);
				$$invalidate(3, displayIncorrect = true);

				// show incorrect words 
				$$invalidate(1, incorrectWords = data.words);
			}
		}).catch(error => {
			console.error("Error:", error);
		});
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);

	function textarea_input_handler() {
		input = this.value;
		$$invalidate(0, input);
	}

	$$self.$capture_state = () => ({
		slide,
		fade,
		input,
		incorrectWords,
		getLettersOnly,
		splitWords,
		formatWords,
		displayCorrect,
		displayIncorrect,
		checkWords,
		formatted_words,
		words_json
	});

	$$self.$inject_state = $$props => {
		if ("input" in $$props) $$invalidate(0, input = $$props.input);
		if ("incorrectWords" in $$props) $$invalidate(1, incorrectWords = $$props.incorrectWords);
		if ("getLettersOnly" in $$props) getLettersOnly = $$props.getLettersOnly;
		if ("splitWords" in $$props) splitWords = $$props.splitWords;
		if ("formatWords" in $$props) $$invalidate(10, formatWords = $$props.formatWords);
		if ("displayCorrect" in $$props) $$invalidate(2, displayCorrect = $$props.displayCorrect);
		if ("displayIncorrect" in $$props) $$invalidate(3, displayIncorrect = $$props.displayIncorrect);
		if ("checkWords" in $$props) $$invalidate(5, checkWords = $$props.checkWords);
		if ("formatted_words" in $$props) $$invalidate(4, formatted_words = $$props.formatted_words);
		if ("words_json" in $$props) words_json = $$props.words_json;
	};

	let formatted_words;
	let words_json;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*input*/ 1) {
			 $$invalidate(4, formatted_words = formatWords(input));
		}

		if ($$self.$$.dirty & /*formatted_words*/ 16) {
			 words_json = { "words": formatted_words };
		}
	};

	return [
		input,
		incorrectWords,
		displayCorrect,
		displayIncorrect,
		formatted_words,
		checkWords,
		textarea_input_handler
	];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguNzc0YWFjYWEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIlxuPHNjcmlwdD5cbmltcG9ydCB7c2xpZGUsIGZhZGV9IGZyb20gXCJzdmVsdGUvdHJhbnNpdGlvblwiO1xuXG5sZXQgaW5wdXQgPSAnJztcbmxldCBpbmNvcnJlY3RXb3JkcyA9ICcnO1xuXG5sZXQgZ2V0TGV0dGVyc09ubHkgPSAod29yZCkgPT4ge1xuXHQvLyBSZXBsYWNlIGFsbCBub24tbnVtZXJpYyBcblx0cmV0dXJuIHdvcmQucmVwbGFjZSgvW15hLXpBLVpfXS9nLCAnJykudG9Mb3dlckNhc2UoKTtcbn1cblxubGV0IHNwbGl0V29yZHMgPSAod29yZHMpID0+IHtcblx0Ly8gVXNlIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBzcGxpdCBieSBjb21tYSBvciB3aGl0ZXNwYWNlXG5cdHJldHVybiB3b3Jkcy5zcGxpdCgvWy4gLDpdKy8pXG5cdC8vIHJldHVybiB3b3Jkcy5zcGxpdCgvKD86LHwgKSsvKTsgIGZvdW5kIHRoaXMgb24gdGhlIHdlYiBcbn1cblxuXG5sZXQgZm9ybWF0V29yZHMgPSAoc3RyKSA9PiB7XG5cdHJldHVybiBzcGxpdFdvcmRzKHN0cikubWFwKGdldExldHRlcnNPbmx5KS5maWx0ZXIoQm9vbGVhbik7XG59XG4kOiBmb3JtYXR0ZWRfd29yZHMgPSBmb3JtYXRXb3JkcyhpbnB1dCk7XG5cbiQ6IHdvcmRzX2pzb24gPSB7XCJ3b3Jkc1wiIDogZm9ybWF0dGVkX3dvcmRzfTtcblxubGV0IGRpc3BsYXlDb3JyZWN0ID0gZmFsc2U7XG5sZXQgZGlzcGxheUluY29ycmVjdCA9IGZhbHNlO1xuXG5sZXQgY2hlY2tXb3JkcyA9ICgpID0+IHtcbiAgICAvLyBhc3luYyByZXF1ZXN0IFxuICAgIGZldGNoKCcvY2hlY2snLCB7XG5cdFx0bWV0aG9kOiAnUE9TVCcsICBcblx0XHRoZWFkZXJzOiB7XG5cdFx0J0FjY2VwdCcgOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJywgXG5cdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiBcdFx0fSwgIFxuXHRcdGJvZHk6IEpTT04uc3RyaW5naWZ5KHdvcmRzX2pzb24pXG5cdH0pXG5cdC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcblx0LnRoZW4oZGF0YSA9PiB7XG5cdFx0Y29uc29sZS5sb2coZGF0YSk7XG5cdFx0aWYgKGRhdGEuYWxsQ29ycmVjdCl7XG5cdFx0XHRkaXNwbGF5Q29ycmVjdCA9IHRydWU7XG5cdFx0XHRkaXNwbGF5SW5jb3JyZWN0ID0gZmFsc2U7XG5cdFx0XHQvLyBzaG93IGFsbCB3b3JkcyBjb3JyZWN0XG5cdFx0XHRjb25zb2xlLmxvZyhcIkFsbCB3b3JkcyBjb3JyZWN0XCIpXG5cdFx0fVxuXHRcdGVsc2V7XG5cdFx0XHRkaXNwbGF5Q29ycmVjdCA9IGZhbHNlO1xuXHRcdFx0ZGlzcGxheUluY29ycmVjdCA9IHRydWU7XG5cblx0XHRcdC8vIHNob3cgaW5jb3JyZWN0IHdvcmRzIFxuXHRcdFx0aW5jb3JyZWN0V29yZHMgPSBkYXRhLndvcmRzO1xuXHRcdH1cblxuXHR9KVxuXHQuY2F0Y2goKGVycm9yKSA9PiB7XG5cdFx0Y29uc29sZS5lcnJvcignRXJyb3I6JywgZXJyb3IpO1xuXHR9KTtcbn1cbiBcblxuXG48L3NjcmlwdD5cblxuXG48c3R5bGU+XG5cbi5idG4uYnRuLWxpbmt7XG5cdGNvbG9yOiAjMDA3YmZmO1xufVxuXG4uYnRuLmJ0bi1saW5rOmhvdmVye1xuXHRiYWNrZ3JvdW5kOiAjZjhmOGY4O1xufVxuXG4uYnRuLmJ0bi1saW5rOmFjdGl2ZXtcblx0YmFja2dyb3VuZDogI2Y4ZjhmODsgXG59XG4uYnRuLmJ0bi1saW5rOmZvY3Vze1xuXHRiYWNrZ3JvdW5kOiAjZjhmOGY4O1xuXHRib3JkZXI6IG5vbmU7XG5cdGJveC1zaGFkb3c6IG5vbmU7XG59XG5cblxuXG4gXG48L3N0eWxlPlxuXG48ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgXG5cdDxoZWFkZXIgY2xhc3M9XCJuYXZiYXJcIj5cblx0XHQ8dWwgY2xhc3M9XCJuYXZiYXItbmF2IGZsZXgtcm93IG1sLW1kLWF1dG8gZC1ub25lIGQtbWQtZmxleFwiPiBcblxuXHRcdDxhIGhyZWY9XCIvYWRkXCIgY2xhc3M9XCJidG4gYnRuLWJkLWRvd25sb2FkIGQtbm9uZSBkLWxnLWlubGluZS1ibG9jayBhZGQtaXRlbVwiPlxuXHRcdFx0QWRkIFdvcmRzIFxuXHRcdDwvYT5cblx0XHQ8L3VsPlxuXHQ8L2hlYWRlcj5cblxuXG5cdDxoMSBjbGFzcz1cInRleHQtY2VudGVyIGhlYWRpbmdcIj5TcGVsbGluZyBDaGVja2VyPC9oMT5cblx0PCEtLSBJZiBhbGwgd29yZHMgYXJlIHJpZ2h0OiAtLT5cblxuXHR7I2lmIGRpc3BsYXlDb3JyZWN0fVxuXHRcdDxkaXYgdHJhbnNpdGlvbjpmYWRlIGNsYXNzPVwiYWxlcnQgYWxlcnQtc3VjY2VzcyB3b3Jkcy1zdGF0dXNcIiByb2xlPVwiYWxlcnRcIj5cblx0XHRcdEFsbCB3b3JkcyBhcmUgY29ycmVjdCFcblx0XHQ8L2Rpdj5cblx0ey9pZn1cblxuXHR7I2lmIGRpc3BsYXlJbmNvcnJlY3R9XG5cdFx0PGRpdiB0cmFuc2l0aW9uOmZhZGUgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXJcIiByb2xlPVwiYWxlcnRcIj5cblx0XHRcdDxoNT5UaGVzZSB3b3JkcyBhcmUgbm90IGluIHRoZSBsaWJyYXJ5OjwvaDU+XG5cdFx0XHR7aW5jb3JyZWN0V29yZHMubWFwKCh3b3JkKSA9PiBcIiBcIiArIHdvcmQpfVxuXHRcdFx0PGJyPiBcblx0XHRcdDxmb3JtIGFjdGlvbj1cIi9hZGRcIiBtZXRob2Q9XCJQT1NUXCI+XG5cdFx0XHRcdDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgbmFtZT1cIndvcmRzXCIgdmFsdWU9e2luY29ycmVjdFdvcmRzfT5cblx0XHRcdFx0PGlucHV0IHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IHN1Ym1pdC1idG5cIiB2YWx1ZT1cIkFkZCB0aGVzZSB3b3JkcyBpbW1lZGlhdGVseVwiPlxuXHRcdFx0PC9mb3JtPiBcblxuXHRcdDwvZGl2PlxuXHR7L2lmfVxuXG5cdDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPlxuXHRcdDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cC1wcmVwZW5kXCI+XG5cdFx0ICA8c3Bhbj48L3NwYW4+XG5cdFx0PC9kaXY+XG5cdFx0PHRleHRhcmVhIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgYmluZDp2YWx1ZT17aW5wdXR9IGFyaWEtbGFiZWw9XCJXaXRoIHRleHRhcmVhXCIgcGxhY2Vob2xkZXI9XCJFbnRlciB5b3VyIHRleHQgaGVyZS5cIj48L3RleHRhcmVhPlxuXHQ8L2Rpdj4gXG5cdDxkaXYgY2xhc3M9XCJidXR0b24tY29udGFpbmVyIHRleHQtY2VudGVyXCI+XG5cdFx0PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSB0ZXh0LWNlbnRlciBjaGVjay1idXR0b25cIiBvbjpjbGljaz17Y2hlY2tXb3Jkc30+Q2hlY2s8L2J1dHRvbj5cblx0PC9kaXY+XG5cblxuXHQ8IS0tIFNob3cgb25seSBpZiB3b3JkcyBhcmUgZW50ZXJlZCAtLT4gXG5cdDxkaXYgaWQ9XCJhY2NvcmRpb25cIj5cblx0XHQ8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNhcmQtaGVhZGVyXCIgaWQ9XCJoZWFkaW5nT25lXCI+XG5cdFx0XHQ8aDUgY2xhc3M9XCJtYi0wXCI+XG5cdFx0XHRcdDxzcGFuIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCIgZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiIGRhdGEtdGFyZ2V0PVwiI2NvbGxhcHNlT25lXCIgYXJpYS1leHBhbmRlZD1cInRydWVcIiBhcmlhLWNvbnRyb2xzPVwiY29sbGFwc2VPbmVcIj5Xb3JkcyBlbnRlcmVkOjwvc3Bhbj5cblx0XHRcdDwvaDU+XG5cdFx0XHQ8L2Rpdj5cblxuXHRcdFx0PGRpdiBpZD1cImNvbGxhcHNlT25lXCIgY2xhc3M9XCJjb2xsYXBzZSBzaG93XCIgYXJpYS1sYWJlbGxlZGJ5PVwiaGVhZGluZ09uZVwiIGRhdGEtcGFyZW50PVwiI2FjY29yZGlvblwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuXHRcdFx0XHR7I2lmIGlucHV0Lmxlbmd0aCAhPSAwfVxuXHRcdFx0XHR7Zm9ybWF0dGVkX3dvcmRzLm1hcCgod29yZCkgPT4gXCIgXCIgKyB3b3JkKX1cblx0XHRcdFx0ezplbHNlfVxuXHRcdFx0XHRObyB3b3JkcyBlbnRlcmVkIHlldCFcblx0XHRcdFx0ey9pZn1cblx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdDwvZGl2PiBcblx0XG5cblxuXG48L2Rpdj4gIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7bUNBbUhJLEdBQWMsSUFBQyxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUNBR3VCLEdBQWM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lHQUh2RCxHQUFjLElBQUMsR0FBRzs7O2lEQUd1QixHQUFjOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQ0E4QnRELEdBQWUsSUFBQyxHQUFHOzs7Ozs7Ozs7Ozs7OztvRkFBbkIsR0FBZSxJQUFDLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBMUNsQixHQUFjO3NDQU1kLEdBQWdCOzs7Z0JBbUNiLEdBQUssSUFBQyxNQUFNLElBQUksQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dUNBbEJtQixHQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0RBR3lDLEdBQVU7Ozs7Ozs7MEJBMUIvRixHQUFjOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJBTWQsR0FBZ0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3Q0FpQnVCLEdBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2FBZDFCLElBQUksSUFBSyxHQUFHLEdBQUcsSUFBSTtlQWlDakIsSUFBSSxJQUFLLEdBQUcsR0FBRyxJQUFJOzs7S0FoSnpDLEtBQUssR0FBRyxFQUFFO0tBQ1YsY0FBYyxHQUFHLEVBQUU7O0tBRW5CLGNBQWMsR0FBSSxJQUFJOztTQUVsQixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxFQUFFLEVBQUUsV0FBVzs7O0tBRy9DLFVBQVUsR0FBSSxLQUFLOztTQUVmLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUzs7O0tBS3pCLFdBQVcsR0FBSSxHQUFHO1NBQ2QsVUFBVSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxPQUFPOzs7S0FNdEQsY0FBYyxHQUFHLEtBQUs7S0FDdEIsZ0JBQWdCLEdBQUcsS0FBSzs7S0FFeEIsVUFBVTs7RUFFVixLQUFLLENBQUMsUUFBUTtHQUNoQixNQUFNLEVBQUUsTUFBTTtHQUNkLE9BQU87SUFDUCxRQUFRLEVBQUcsbUNBQW1DO0lBQzlDLGNBQWMsRUFBRSxrQkFBa0I7O0dBRWxDLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVU7S0FFL0IsSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsSUFBSSxJQUM5QixJQUFJLENBQUMsSUFBSTtHQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSTs7T0FDWixJQUFJLENBQUMsVUFBVTtvQkFDbEIsY0FBYyxHQUFHLElBQUk7b0JBQ3JCLGdCQUFnQixHQUFHLEtBQUs7OztJQUV4QixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQjs7b0JBRy9CLGNBQWMsR0FBRyxLQUFLO29CQUN0QixnQkFBZ0IsR0FBRyxJQUFJOzs7b0JBR3ZCLGNBQWMsR0FBRyxJQUFJLENBQUMsS0FBSzs7S0FJNUIsS0FBSyxDQUFFLEtBQUs7R0FDWixPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLOzs7Ozs7Ozs7Ozs7OztFQXVFYyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkEzRy9DLGVBQWUsR0FBRyxXQUFXLENBQUMsS0FBSzs7OztJQUVuQyxVQUFVLEtBQUksT0FBTyxFQUFHLGVBQWU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
