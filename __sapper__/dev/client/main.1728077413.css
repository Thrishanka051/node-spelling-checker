h1.svelte-1rg2kx5{margin:0 auto}h1.svelte-1rg2kx5{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}@media(min-width: 480px){h1.svelte-1rg2kx5{font-size:4em}}.container.svelte-1rg2kx5{margin-top:100px}
a.btn.btn-link.svelte-1brt2y3{color:#007bff}a.btn.btn-link.svelte-1brt2y3:hover{background:#f8f8f8}a.btn.btn-link.svelte-1brt2y3:active{background:#f8f8f8}a.btn.btn-link.svelte-1brt2y3:focus{background:#f8f8f8;border:none;box-shadow:none}
a.btn.btn-link.svelte-1q1ggqx{color:#007bff}a.btn.btn-link.svelte-1q1ggqx:hover{background:#f8f8f8}a.btn.btn-link.svelte-1q1ggqx:active{background:#f8f8f8}a.btn.btn-link.svelte-1q1ggqx:focus{background:#f8f8f8;border:none;box-shadow:none}
ul.svelte-1frg2tf{margin:0 0 1em 0;line-height:1.5}
.content.svelte-gnxal1 h2{font-size:1.4em;font-weight:500}.content.svelte-gnxal1 pre{background-color:#f9f9f9;box-shadow:inset 1px 1px 5px rgba(0,0,0,0.05);padding:0.5em;border-radius:2px;overflow-x:auto}.content.svelte-gnxal1 pre code{background-color:transparent;padding:0}.content.svelte-gnxal1 ul{line-height:1.5}.content.svelte-gnxal1 li{margin:0 0 0.5em 0}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi4xNzI4MDc3NDEzLmNzcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vX2Vycm9yLnN2ZWx0ZSIsIi4uLy4uLy4uL2luZGV4LnN2ZWx0ZSIsIi4uLy4uLy4uL2FkZC5zdmVsdGUiLCIuLi8uLi8uLi9pbmRleC5zdmVsdGUiLCIuLi8uLi8uLi9bc2x1Z10uc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG5cdGV4cG9ydCBsZXQgc3RhdHVzO1xuXHRleHBvcnQgbGV0IGVycm9yO1xuXG5cdGNvbnN0IGRldiA9IFwiZGV2ZWxvcG1lbnRcIiA9PT0gJ2RldmVsb3BtZW50Jztcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG5cdGgxLCBwIHtcblx0XHRtYXJnaW46IDAgYXV0bztcblx0fVxuXG5cdGgxIHtcblx0XHRmb250LXNpemU6IDIuOGVtO1xuXHRcdGZvbnQtd2VpZ2h0OiA3MDA7XG5cdFx0bWFyZ2luOiAwIDAgMC41ZW0gMDtcblx0fVxuXG5cdHAge1xuXHRcdG1hcmdpbjogMWVtIGF1dG87XG5cdH1cblxuXHRAbWVkaWEgKG1pbi13aWR0aDogNDgwcHgpIHtcblx0XHRoMSB7XG5cdFx0XHRmb250LXNpemU6IDRlbTtcblx0XHR9XG5cdH1cblxuXHQuY29udGFpbmVye1xuXHRcdG1hcmdpbi10b3A6IDEwMHB4O1xuXHR9XG48L3N0eWxlPlxuXG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT57c3RhdHVzfTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuPGRpdiBjbGFzcz1cImNvbnRhaW5lciB0ZXh0LWNlbnRlclwiPlxuXHQ8aDEgPntzdGF0dXN9PC9oMT5cblx0PGgzPntlcnJvci5tZXNzYWdlfTwvaDM+XG48L2Rpdj5cblxuXG5cblxueyNpZiBkZXYgJiYgZXJyb3Iuc3RhY2t9XG5cdDxwcmU+e2Vycm9yLnN0YWNrfTwvcHJlPlxuey9pZn1cbiIsIlxuPHNjcmlwdD5cbmxldCBpbnB1dCA9ICcnO1xuXG5sZXQgZ2V0TGV0dGVyc09ubHkgPSAod29yZCkgPT4ge1xuXHQvLyBSZXBsYWNlIGFsbCBub24tbnVtZXJpYyBcblx0cmV0dXJuIHdvcmQucmVwbGFjZSgvW15hLXpBLVpfXS9nLCAnJykudG9Mb3dlckNhc2UoKTtcbn1cblxubGV0IHNwbGl0V29yZHMgPSAod29yZHMpID0+IHtcblx0Ly8gVXNlIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBzcGxpdCBieSBjb21tYSBvciB3aGl0ZXNwYWNlXG5cdHJldHVybiB3b3Jkcy5zcGxpdCgvWy4gLDpdKy8pXG5cdC8vIHJldHVybiB3b3Jkcy5zcGxpdCgvKD86LHwgKSsvKTsgIGZvdW5kIHRoaXMgb24gdGhlIHdlYiBcbn1cblxubGV0IGZvcm1hdFdvcmRzID0gKHN0cikgPT4ge1xuXHRyZXR1cm4gc3BsaXRXb3JkcyhzdHIpLm1hcChnZXRMZXR0ZXJzT25seSkuZmlsdGVyKEJvb2xlYW4pO1xufVxuJDogZm9ybWF0dGVkX3dvcmRzID0gZm9ybWF0V29yZHMoaW5wdXQpLm1hcCgod29yZCkgPT4gJyAnICsgd29yZCk7XG5cbiQ6IHdvcmRzX2pzb24gPSB7XCJ3b3Jkc1wiIDogZm9ybWF0dGVkX3dvcmRzfTtcblxubGV0IGNoZWNrV29yZHMgPSAoKSA9PiB7XG4gICAgLy8gYXN5bmMgcmVxdWVzdCBcbiAgICBmZXRjaCgnL2NoZWNrJywge1xuXHRcdG1ldGhvZDogJ1BPU1QnLCAvLyAqR0VULCBQT1NULCBQVVQsIERFTEVURSwgZXRjLiBcblx0XHRoZWFkZXJzOiB7XG5cdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcblx0XHQvLyAnQ29udGVudC1UeXBlJzogJ3RleHQvcGxhaW4nIFxuXHRcdH0sIFxuXHRcdC8vIGJvZHk6IEpTT04uc3RyaW5naWZ5KGlucHV0KSAvLyBib2R5IGRhdGEgdHlwZSBtdXN0IG1hdGNoIFwiQ29udGVudC1UeXBlXCIgaGVhZGVyXG5cdFx0Ym9keTogSlNPTi5zdHJpbmdpZnkod29yZHNfanNvbiksXG5cdFx0Ly8gYm9keTogZm9ybWF0dGVkX3dvcmRzXG5cdH0pXG5cdC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcblx0LnRoZW4oZGF0YSA9PiB7XG5cdFx0Y29uc29sZS5sb2coJ1N1Y2Nlc3M6JywgZGF0YSk7XG5cdH0pXG5cdC5jYXRjaCgoZXJyb3IpID0+IHtcblx0XHRjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvcik7XG5cdH0pO1xufVxuIFxuXG5cbjwvc2NyaXB0PlxuXG5cbjxzdHlsZT5cblxuYS5idG4uYnRuLWxpbmt7XG5cdGNvbG9yOiAjMDA3YmZmO1xufVxuXG5hLmJ0bi5idG4tbGluazpob3Zlcntcblx0YmFja2dyb3VuZDogI2Y4ZjhmODtcblxufVxuXG5hLmJ0bi5idG4tbGluazphY3RpdmV7XG5cdGJhY2tncm91bmQ6ICNmOGY4Zjg7IFxufVxuYS5idG4uYnRuLWxpbms6Zm9jdXN7XG5cdGJhY2tncm91bmQ6ICNmOGY4Zjg7XG5cdGJvcmRlcjogbm9uZTtcblx0Ym94LXNoYWRvdzogbm9uZTtcbn1cblxuXG5cbiBcbjwvc3R5bGU+XG5cbjxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICBcblx0PGhlYWRlciBjbGFzcz1cIm5hdmJhclwiPlxuXHRcdDx1bCBjbGFzcz1cIm5hdmJhci1uYXYgZmxleC1yb3cgbWwtbWQtYXV0byBkLW5vbmUgZC1tZC1mbGV4XCI+IFxuXG5cdFx0PGEgaHJlZj1cIi9hZGRcIiBjbGFzcz1cImJ0biBidG4tYmQtZG93bmxvYWQgZC1ub25lIGQtbGctaW5saW5lLWJsb2NrIGFkZC1pdGVtXCI+XG5cdFx0XHRBZGQgV29yZHMgXG5cdFx0PC9hPlxuXHRcdDwvdWw+XG5cdDwvaGVhZGVyPlxuXG5cblx0PGgxIGNsYXNzPVwidGV4dC1jZW50ZXIgaGVhZGluZ1wiPlNwZWxsaW5nIENoZWNrZXI8L2gxPlxuXHQ8IS0tIElmIGFsbCB3b3JkcyBhcmUgcmlnaHQ6IC0tPlxuXG5cblx0PGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3Mgd29yZHMtc3RhdHVzXCIgcm9sZT1cImFsZXJ0XCI+XG5cdFx0QWxsIHdvcmRzIGFyZSBjb3JyZWN0IVxuXHQ8L2Rpdj5cblx0XHRcblx0PGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiIHJvbGU9XCJhbGVydFwiPlxuXHRcdDxoNT5UaGVzZSB3b3JkcyBhcmUgbm90IGluIHRoZSBsaWJyYXJ5OjwvaDU+XG5cdFx0e2lucHV0fVxuXHRcdDxicj4gXG5cdFx0PGZvcm0gYWN0aW9uPVwiL2FkZFwiPlxuXHRcdDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgdmFsdWU9XCJTYWxhbSwgcGFwYWxhbSwgeHV5LCBwaXpkYVwiID5cblx0XHQ8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgc3VibWl0LWJ0blwiIHZhbHVlPVwiQWRkIHRoZXNlIHdvcmRzXCI+XG5cdFx0PC9mb3JtPiBcblx0PC9kaXY+XG5cblx0PGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+XG5cdFx0PGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLXByZXBlbmRcIj5cblx0XHQgIDxzcGFuPjwvc3Bhbj5cblx0XHQ8L2Rpdj5cblx0XHQ8dGV4dGFyZWEgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBiaW5kOnZhbHVlPXtpbnB1dH0gYXJpYS1sYWJlbD1cIldpdGggdGV4dGFyZWFcIiBwbGFjZWhvbGRlcj1cIkVudGVyIHlvdXIgdGV4dCBoZXJlLlwiPjwvdGV4dGFyZWE+XG5cdDwvZGl2PiBcblx0PGRpdiBjbGFzcz1cImJ1dHRvbi1jb250YWluZXIgdGV4dC1jZW50ZXJcIj5cblx0XHQ8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IHRleHQtY2VudGVyIGNoZWNrLWJ1dHRvblwiIG9uOmNsaWNrPXtjaGVja1dvcmRzfT5DaGVjazwvYnV0dG9uPlxuXHQ8L2Rpdj5cblxuXG5cdDwhLS0gU2hvdyBvbmx5IGlmIHdvcmRzIGFyZSBlbnRlcmVkIC0tPiBcblx0PGRpdiBpZD1cImFjY29yZGlvblwiPlxuXHRcdDxkaXYgY2xhc3M9XCJjYXJkXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY2FyZC1oZWFkZXJcIiBpZD1cImhlYWRpbmdPbmVcIj5cblx0XHRcdDxoNSBjbGFzcz1cIm1iLTBcIj5cblx0XHRcdFx0PGEgY2xhc3M9XCJidG4gYnRuLWxpbmtcIiBkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCIgZGF0YS10YXJnZXQ9XCIjY29sbGFwc2VPbmVcIiBhcmlhLWV4cGFuZGVkPVwidHJ1ZVwiIGFyaWEtY29udHJvbHM9XCJjb2xsYXBzZU9uZVwiPldvcmRzIGVudGVyZWQ6PC9hPlxuXHRcdFx0PC9oNT5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8ZGl2IGlkPVwiY29sbGFwc2VPbmVcIiBjbGFzcz1cImNvbGxhcHNlIHNob3dcIiBhcmlhLWxhYmVsbGVkYnk9XCJoZWFkaW5nT25lXCIgZGF0YS1wYXJlbnQ9XCIjYWNjb3JkaW9uXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG5cdFx0XHRcdHsjaWYgaW5wdXQubGVuZ3RoICE9IDB9XG5cdFx0XHRcdHtmb3JtYXR0ZWRfd29yZHN9XG5cdFx0XHRcdHs6ZWxzZX1cblx0XHRcdFx0Tm8gd29yZHMgZW50ZXJlZCB5ZXQhXG5cdFx0XHRcdHsvaWZ9XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXHQ8L2Rpdj4gXG5cdFxuXG5cblxuPC9kaXY+ICIsIjxzY3JpcHQ+XG5sZXQgZ2V0TGV0dGVyc09ubHkgPSAod29yZCkgPT4ge1xuXHQvLyBSZXBsYWNlIGFsbCBub24tbnVtZXJpYyBcblx0cmV0dXJuIHdvcmQucmVwbGFjZSgvW15hLXpBLVpfXS9nLCAnJykudG9Mb3dlckNhc2UoKTtcbn1cblxuXG5cbmxldCBzcGxpdFdvcmRzID0gKHdvcmRzKSA9PiB7XG5cdC8vIFVzZSByZWd1bGFyIGV4cHJlc3Npb24gdG8gc3BsaXQgYnkgY29tbWEgb3Igd2hpdGVzcGFjZVxuXHRyZXR1cm4gd29yZHMuc3BsaXQoL1suICw6XSsvKVxuXHQvLyByZXR1cm4gd29yZHMuc3BsaXQoLyg/Oix8ICkrLyk7ICBmb3VuZCB0aGlzIG9uIHRoZSB3ZWIgXG59XG5cblxubGV0IGZvcm1hdFdvcmRzID0gKHN0cikgPT4ge1xuXHRyZXR1cm4gc3BsaXRXb3JkcyhzdHIpLm1hcChnZXRMZXR0ZXJzT25seSkuZmlsdGVyKEJvb2xlYW4pO1xufVxuXG5cbmxldCBjaGVja1dvcmRzID0gKCkgPT4ge1xuICAgIC8vIFRPRE86IGFqYXggcmVxdWVzdFxuICAgIFxufVxuXG5sZXQgaW5wdXQgPSAnJztcbjwvc2NyaXB0PlxuPHN0eWxlPlxuYS5idG4uYnRuLWxpbmt7XG5cdGNvbG9yOiAjMDA3YmZmO1xufVxuXG5hLmJ0bi5idG4tbGluazpob3Zlcntcblx0YmFja2dyb3VuZDogI2Y4ZjhmODtcblxufVxuXG5hLmJ0bi5idG4tbGluazphY3RpdmV7XG5cdGJhY2tncm91bmQ6ICNmOGY4Zjg7IFxufVxuYS5idG4uYnRuLWxpbms6Zm9jdXN7XG5cdGJhY2tncm91bmQ6ICNmOGY4Zjg7XG5cdGJvcmRlcjogbm9uZTtcblx0Ym94LXNoYWRvdzogbm9uZTtcbn1cbjwvc3R5bGU+ICAgICAgXG5cblxuPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgIFxuICAgIDxoZWFkZXIgY2xhc3M9XCJuYXZiYXJcIj5cbiAgICAgICAgPHVsIGNsYXNzPVwibmF2YmFyLW5hdiBmbGV4LXJvdyBtbC1tZC1hdXRvIGQtbm9uZSBkLW1kLWZsZXhcIj4gXG5cbiAgICAgICAgPGEgaHJlZj1cIi9cIiBjbGFzcz1cImJ0biBidG4tYmQtZG93bmxvYWQgZC1ub25lIGQtbGctaW5saW5lLWJsb2NrIG1iLTMgbWItbWQtMCBtbC1tZC0zIGFkZC1pdGVtXCI+XG4gICAgICAgICAgICBDaGVjayBXb3Jkc1xuICAgICAgICA8L2E+XG4gICAgICAgIDwvdWw+XG4gICAgPC9oZWFkZXI+XG5cblxuICAgIDxoMSBjbGFzcz1cInRleHQtY2VudGVyIGhlYWRpbmdcIj5BZGQgdG8gdGhlIGRpY3Rpb25hcnk8L2gxPlxuICAgIDwhLS0gSWYgYWxsIHdvcmRzIGFyZSByaWdodDogLS0+XG5cblxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1zdWNjZXNzIHdvcmRzLXN0YXR1c1wiIHJvbGU9XCJhbGVydFwiPlxuICAgICAgICBOZXcgd29yZHMgYXJlIG5vdyBhZGRlZCFcbiAgICA8L2Rpdj5cbiAgICBcblxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgd29yZHMtc3RhdHVzXCIgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgIEZhaWxlZCB0byBhZGQgd29yZHMhIFRyeSBhZ2Fpbi5cbiAgICA8L2Rpdj5cblxuXG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgPGg1PlRoZXNlIHdvcmRzIGFyZSBhbHJlYWR5IGluIHRoZSBkaWN0aW9uYXJ5OjwvaDU+XG5cbiAgICAgICAgU2FsYW0sIHBhcGFsYW0sIHh1eSwgcGl6ZGEgXG4gICAgPC9kaXY+XG5cbiAgICA8Zm9ybSBhY3Rpb249XCIvXCI+XG4gICAgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLXByZXBlbmRcIj5cbiAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgYmluZDp2YWx1ZT17aW5wdXR9IGFyaWEtbGFiZWw9XCJXaXRoIHRleHRhcmVhXCIgcGxhY2Vob2xkZXI9XCJFbnRlciB5b3VyIHdvcmRzIChzZXBlcmF0ZWQgYnkgY29tbWEgb3Igd2hpdGVzcGFjZSkuXCI+PC90ZXh0YXJlYT5cbiAgICAgICAgPC9kaXY+IFxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgIDxsYWJlbCBmb3I9XCJleGFtcGxlRm9ybUNvbnRyb2xGaWxlMVwiPkZpbGUgd2l0aCB3b3JkcyAoc2VwZXJhdGVkIGJ5IGNvbW1hIG9yIHdoaXRlc3BhY2VzKTwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwiZmlsZVwiIGNsYXNzPVwiZm9ybS1jb250cm9sLWZpbGVcIiBpZD1cImV4YW1wbGVGb3JtQ29udHJvbEZpbGUxXCI+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJidXR0b24tY29udGFpbmVyIHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgdGV4dC1jZW50ZXIgY2hlY2stYnV0dG9uXCIgdmFsdWU9XCJBZGQgV29yZHNcIj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICA8L2Zvcm0+XG5cblxuXG4gICAgXHQ8IS0tIFNob3cgb25seSBpZiB3b3JkcyBhcmUgZW50ZXJlZCAtLT4gXG5cdDxkaXYgaWQ9XCJhY2NvcmRpb25cIj5cblx0XHQ8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNhcmQtaGVhZGVyXCIgaWQ9XCJoZWFkaW5nT25lXCI+XG5cdFx0XHQ8aDUgY2xhc3M9XCJtYi0wXCI+XG5cdFx0XHRcdDxhIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCIgZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiIGRhdGEtdGFyZ2V0PVwiI2NvbGxhcHNlT25lXCIgYXJpYS1leHBhbmRlZD1cInRydWVcIiBhcmlhLWNvbnRyb2xzPVwiY29sbGFwc2VPbmVcIj5Xb3JkcyBlbnRlcmVkOjwvYT5cblx0XHRcdDwvaDU+XG5cdFx0XHQ8L2Rpdj5cblxuXHRcdFx0PGRpdiBpZD1cImNvbGxhcHNlT25lXCIgY2xhc3M9XCJjb2xsYXBzZSBzaG93XCIgYXJpYS1sYWJlbGxlZGJ5PVwiaGVhZGluZ09uZVwiIGRhdGEtcGFyZW50PVwiI2FjY29yZGlvblwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuXHRcdFx0XHR7I2lmIGlucHV0Lmxlbmd0aCAhPSAwfVxuXHRcdFx0XHR7Zm9ybWF0V29yZHMoaW5wdXQpLm1hcCgod29yZCkgPT4gJyAnICsgd29yZCl9XG5cdFx0XHRcdHs6ZWxzZX1cblx0XHRcdFx0Tm8gd29yZHMgZW50ZXJlZCB5ZXQhXG5cdFx0XHRcdHsvaWZ9XG5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdDwvZGl2PiBcblxuICAgIFxuXG5cblxuPC9kaXY+XG4gICAgXG4gIiwiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG5cdGV4cG9ydCBmdW5jdGlvbiBwcmVsb2FkKHsgcGFyYW1zLCBxdWVyeSB9KSB7XG5cdFx0cmV0dXJuIHRoaXMuZmV0Y2goYGJsb2cuanNvbmApLnRoZW4ociA9PiByLmpzb24oKSkudGhlbihwb3N0cyA9PiB7XG5cdFx0XHRyZXR1cm4geyBwb3N0cyB9O1xuXHRcdH0pO1xuXHR9XG48L3NjcmlwdD5cblxuPHNjcmlwdD5cblx0ZXhwb3J0IGxldCBwb3N0cztcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG5cdHVsIHtcblx0XHRtYXJnaW46IDAgMCAxZW0gMDtcblx0XHRsaW5lLWhlaWdodDogMS41O1xuXHR9XG48L3N0eWxlPlxuXG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5CbG9nPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbjxoMT5SZWNlbnQgcG9zdHM8L2gxPlxuXG48dWw+XG5cdHsjZWFjaCBwb3N0cyBhcyBwb3N0fVxuXHRcdDwhLS0gd2UncmUgdXNpbmcgdGhlIG5vbi1zdGFuZGFyZCBgcmVsPXByZWZldGNoYCBhdHRyaWJ1dGUgdG9cblx0XHRcdFx0dGVsbCBTYXBwZXIgdG8gbG9hZCB0aGUgZGF0YSBmb3IgdGhlIHBhZ2UgYXMgc29vbiBhc1xuXHRcdFx0XHR0aGUgdXNlciBob3ZlcnMgb3ZlciB0aGUgbGluayBvciB0YXBzIGl0LCBpbnN0ZWFkIG9mXG5cdFx0XHRcdHdhaXRpbmcgZm9yIHRoZSAnY2xpY2snIGV2ZW50IC0tPlxuXHRcdDxsaT48YSByZWw9J3ByZWZldGNoJyBocmVmPSdibG9nL3twb3N0LnNsdWd9Jz57cG9zdC50aXRsZX08L2E+PC9saT5cblx0ey9lYWNofVxuPC91bD4iLCI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cblx0ZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZWxvYWQoeyBwYXJhbXMsIHF1ZXJ5IH0pIHtcblx0XHQvLyB0aGUgYHNsdWdgIHBhcmFtZXRlciBpcyBhdmFpbGFibGUgYmVjYXVzZVxuXHRcdC8vIHRoaXMgZmlsZSBpcyBjYWxsZWQgW3NsdWddLnN2ZWx0ZVxuXHRcdGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZmV0Y2goYGJsb2cvJHtwYXJhbXMuc2x1Z30uanNvbmApO1xuXHRcdGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuXG5cdFx0aWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuXHRcdFx0cmV0dXJuIHsgcG9zdDogZGF0YSB9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmVycm9yKHJlcy5zdGF0dXMsIGRhdGEubWVzc2FnZSk7XG5cdFx0fVxuXHR9XG48L3NjcmlwdD5cblxuPHNjcmlwdD5cblx0ZXhwb3J0IGxldCBwb3N0O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cblx0Lypcblx0XHRCeSBkZWZhdWx0LCBDU1MgaXMgbG9jYWxseSBzY29wZWQgdG8gdGhlIGNvbXBvbmVudCxcblx0XHRhbmQgYW55IHVudXNlZCBzdHlsZXMgYXJlIGRlYWQtY29kZS1lbGltaW5hdGVkLlxuXHRcdEluIHRoaXMgcGFnZSwgU3ZlbHRlIGNhbid0IGtub3cgd2hpY2ggZWxlbWVudHMgYXJlXG5cdFx0Z29pbmcgdG8gYXBwZWFyIGluc2lkZSB0aGUge3t7cG9zdC5odG1sfX19IGJsb2NrLFxuXHRcdHNvIHdlIGhhdmUgdG8gdXNlIHRoZSA6Z2xvYmFsKC4uLikgbW9kaWZpZXIgdG8gdGFyZ2V0XG5cdFx0YWxsIGVsZW1lbnRzIGluc2lkZSAuY29udGVudFxuXHQqL1xuXHQuY29udGVudCA6Z2xvYmFsKGgyKSB7XG5cdFx0Zm9udC1zaXplOiAxLjRlbTtcblx0XHRmb250LXdlaWdodDogNTAwO1xuXHR9XG5cblx0LmNvbnRlbnQgOmdsb2JhbChwcmUpIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAjZjlmOWY5O1xuXHRcdGJveC1zaGFkb3c6IGluc2V0IDFweCAxcHggNXB4IHJnYmEoMCwwLDAsMC4wNSk7XG5cdFx0cGFkZGluZzogMC41ZW07XG5cdFx0Ym9yZGVyLXJhZGl1czogMnB4O1xuXHRcdG92ZXJmbG93LXg6IGF1dG87XG5cdH1cblxuXHQuY29udGVudCA6Z2xvYmFsKHByZSkgOmdsb2JhbChjb2RlKSB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG5cdFx0cGFkZGluZzogMDtcblx0fVxuXG5cdC5jb250ZW50IDpnbG9iYWwodWwpIHtcblx0XHRsaW5lLWhlaWdodDogMS41O1xuXHR9XG5cblx0LmNvbnRlbnQgOmdsb2JhbChsaSkge1xuXHRcdG1hcmdpbjogMCAwIDAuNWVtIDA7XG5cdH1cbjwvc3R5bGU+XG5cbjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPntwb3N0LnRpdGxlfTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48aDE+e3Bvc3QudGl0bGV9PC9oMT5cblxuPGRpdiBjbGFzcz0nY29udGVudCc+XG5cdHtAaHRtbCBwb3N0Lmh0bWx9XG48L2Rpdj5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQyxFQUFFLGVBQUksQ0FBQyxBQUNOLE1BQU0sQ0FBRSxDQUFDLENBQUMsSUFBSSxBQUNmLENBQUMsQUFFRCxFQUFFLGVBQUMsQ0FBQyxBQUNILFNBQVMsQ0FBRSxLQUFLLENBQ2hCLFdBQVcsQ0FBRSxHQUFHLENBQ2hCLE1BQU0sQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEFBQ3BCLENBQUMsQUFNRCxNQUFNLEFBQUMsWUFBWSxLQUFLLENBQUMsQUFBQyxDQUFDLEFBQzFCLEVBQUUsZUFBQyxDQUFDLEFBQ0gsU0FBUyxDQUFFLEdBQUcsQUFDZixDQUFDLEFBQ0YsQ0FBQyxBQUVELHlCQUFVLENBQUMsQUFDVixVQUFVLENBQUUsS0FBSyxBQUNsQixDQUFDO0FDb0JGLENBQUMsSUFBSSx3QkFBUyxDQUFDLEFBQ2QsS0FBSyxDQUFFLE9BQU8sQUFDZixDQUFDLEFBRUQsQ0FBQyxJQUFJLHdCQUFTLE1BQU0sQ0FBQyxBQUNwQixVQUFVLENBQUUsT0FBTyxBQUVwQixDQUFDLEFBRUQsQ0FBQyxJQUFJLHdCQUFTLE9BQU8sQ0FBQyxBQUNyQixVQUFVLENBQUUsT0FBTyxBQUNwQixDQUFDLEFBQ0QsQ0FBQyxJQUFJLHdCQUFTLE1BQU0sQ0FBQyxBQUNwQixVQUFVLENBQUUsT0FBTyxDQUNuQixNQUFNLENBQUUsSUFBSSxDQUNaLFVBQVUsQ0FBRSxJQUFJLEFBQ2pCLENBQUM7QUN0Q0QsQ0FBQyxJQUFJLHdCQUFTLENBQUMsQUFDZCxLQUFLLENBQUUsT0FBTyxBQUNmLENBQUMsQUFFRCxDQUFDLElBQUksd0JBQVMsTUFBTSxDQUFDLEFBQ3BCLFVBQVUsQ0FBRSxPQUFPLEFBRXBCLENBQUMsQUFFRCxDQUFDLElBQUksd0JBQVMsT0FBTyxDQUFDLEFBQ3JCLFVBQVUsQ0FBRSxPQUFPLEFBQ3BCLENBQUMsQUFDRCxDQUFDLElBQUksd0JBQVMsTUFBTSxDQUFDLEFBQ3BCLFVBQVUsQ0FBRSxPQUFPLENBQ25CLE1BQU0sQ0FBRSxJQUFJLENBQ1osVUFBVSxDQUFFLElBQUksQUFDakIsQ0FBQztBQy9CQSxFQUFFLGVBQUMsQ0FBQyxBQUNILE1BQU0sQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ2pCLFdBQVcsQ0FBRSxHQUFHLEFBQ2pCLENBQUM7QUNZRCxzQkFBUSxDQUFDLEFBQVEsRUFBRSxBQUFFLENBQUMsQUFDckIsU0FBUyxDQUFFLEtBQUssQ0FDaEIsV0FBVyxDQUFFLEdBQUcsQUFDakIsQ0FBQyxBQUVELHNCQUFRLENBQUMsQUFBUSxHQUFHLEFBQUUsQ0FBQyxBQUN0QixnQkFBZ0IsQ0FBRSxPQUFPLENBQ3pCLFVBQVUsQ0FBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDOUMsT0FBTyxDQUFFLEtBQUssQ0FDZCxhQUFhLENBQUUsR0FBRyxDQUNsQixVQUFVLENBQUUsSUFBSSxBQUNqQixDQUFDLEFBRUQsc0JBQVEsQ0FBQyxBQUFRLEdBQUcsQUFBQyxDQUFDLEFBQVEsSUFBSSxBQUFFLENBQUMsQUFDcEMsZ0JBQWdCLENBQUUsV0FBVyxDQUM3QixPQUFPLENBQUUsQ0FBQyxBQUNYLENBQUMsQUFFRCxzQkFBUSxDQUFDLEFBQVEsRUFBRSxBQUFFLENBQUMsQUFDckIsV0FBVyxDQUFFLEdBQUcsQUFDakIsQ0FBQyxBQUVELHNCQUFRLENBQUMsQUFBUSxFQUFFLEFBQUUsQ0FBQyxBQUNyQixNQUFNLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxBQUNwQixDQUFDIn0= */