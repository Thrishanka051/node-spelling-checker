h1.svelte-1rg2kx5{margin:0 auto}h1.svelte-1rg2kx5{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}@media(min-width: 480px){h1.svelte-1rg2kx5{font-size:4em}}.container.svelte-1rg2kx5{margin-top:100px}
a.btn.btn-link.svelte-1brt2y3{color:#007bff}a.btn.btn-link.svelte-1brt2y3:hover{background:#f8f8f8}a.btn.btn-link.svelte-1brt2y3:active{background:#f8f8f8}a.btn.btn-link.svelte-1brt2y3:focus{background:#f8f8f8;border:none;box-shadow:none}
a.btn.btn-link.svelte-1q1ggqx{color:#007bff}a.btn.btn-link.svelte-1q1ggqx:hover{background:#f8f8f8}a.btn.btn-link.svelte-1q1ggqx:active{background:#f8f8f8}a.btn.btn-link.svelte-1q1ggqx:focus{background:#f8f8f8;border:none;box-shadow:none}
ul.svelte-1frg2tf{margin:0 0 1em 0;line-height:1.5}
.content.svelte-gnxal1 h2{font-size:1.4em;font-weight:500}.content.svelte-gnxal1 pre{background-color:#f9f9f9;box-shadow:inset 1px 1px 5px rgba(0,0,0,0.05);padding:0.5em;border-radius:2px;overflow-x:auto}.content.svelte-gnxal1 pre code{background-color:transparent;padding:0}.content.svelte-gnxal1 ul{line-height:1.5}.content.svelte-gnxal1 li{margin:0 0 0.5em 0}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi4xNzI4MDc3NDEzLmNzcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vX2Vycm9yLnN2ZWx0ZSIsIi4uLy4uLy4uL2luZGV4LnN2ZWx0ZSIsIi4uLy4uLy4uL2FkZC5zdmVsdGUiLCIuLi8uLi8uLi9pbmRleC5zdmVsdGUiLCIuLi8uLi8uLi9bc2x1Z10uc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG5cdGV4cG9ydCBsZXQgc3RhdHVzO1xuXHRleHBvcnQgbGV0IGVycm9yO1xuXG5cdGNvbnN0IGRldiA9IFwiZGV2ZWxvcG1lbnRcIiA9PT0gJ2RldmVsb3BtZW50Jztcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG5cdGgxLCBwIHtcblx0XHRtYXJnaW46IDAgYXV0bztcblx0fVxuXG5cdGgxIHtcblx0XHRmb250LXNpemU6IDIuOGVtO1xuXHRcdGZvbnQtd2VpZ2h0OiA3MDA7XG5cdFx0bWFyZ2luOiAwIDAgMC41ZW0gMDtcblx0fVxuXG5cdHAge1xuXHRcdG1hcmdpbjogMWVtIGF1dG87XG5cdH1cblxuXHRAbWVkaWEgKG1pbi13aWR0aDogNDgwcHgpIHtcblx0XHRoMSB7XG5cdFx0XHRmb250LXNpemU6IDRlbTtcblx0XHR9XG5cdH1cblxuXHQuY29udGFpbmVye1xuXHRcdG1hcmdpbi10b3A6IDEwMHB4O1xuXHR9XG48L3N0eWxlPlxuXG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT57c3RhdHVzfTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuPGRpdiBjbGFzcz1cImNvbnRhaW5lciB0ZXh0LWNlbnRlclwiPlxuXHQ8aDEgPntzdGF0dXN9PC9oMT5cblx0PGgzPntlcnJvci5tZXNzYWdlfTwvaDM+XG48L2Rpdj5cblxuXG5cblxueyNpZiBkZXYgJiYgZXJyb3Iuc3RhY2t9XG5cdDxwcmU+e2Vycm9yLnN0YWNrfTwvcHJlPlxuey9pZn1cbiIsIlxuPHNjcmlwdD5cblxubGV0IGdldExldHRlcnNPbmx5ID0gKHdvcmQpID0+IHtcblx0Ly8gUmVwbGFjZSBhbGwgbm9uLW51bWVyaWMgXG5cdHJldHVybiB3b3JkLnJlcGxhY2UoL1teYS16QS1aX10vZywgJycpLnRvTG93ZXJDYXNlKCk7XG59XG5cblxuXG5sZXQgc3BsaXRXb3JkcyA9ICh3b3JkcykgPT4ge1xuXHQvLyBVc2UgcmVndWxhciBleHByZXNzaW9uIHRvIHNwbGl0IGJ5IGNvbW1hIG9yIHdoaXRlc3BhY2Vcblx0cmV0dXJuIHdvcmRzLnNwbGl0KC9bLiAsOl0rLylcblx0Ly8gcmV0dXJuIHdvcmRzLnNwbGl0KC8oPzosfCApKy8pOyAgZm91bmQgdGhpcyBvbiB0aGUgd2ViIFxufVxuXG5cbmxldCBmb3JtYXRXb3JkcyA9IChzdHIpID0+IHtcblx0cmV0dXJuIHNwbGl0V29yZHMoc3RyKS5tYXAoZ2V0TGV0dGVyc09ubHkpLmZpbHRlcihCb29sZWFuKTtcbn1cblxuXG5sZXQgY2hlY2tXb3JkcyA9ICgpID0+IHtcblx0XG59XG5cbmxldCBpbnB1dCA9ICcnO1xuXG48L3NjcmlwdD5cblxuXG48c3R5bGU+XG5cbmEuYnRuLmJ0bi1saW5re1xuXHRjb2xvcjogIzAwN2JmZjtcbn1cblxuYS5idG4uYnRuLWxpbms6aG92ZXJ7XG5cdGJhY2tncm91bmQ6ICNmOGY4Zjg7XG5cbn1cblxuYS5idG4uYnRuLWxpbms6YWN0aXZle1xuXHRiYWNrZ3JvdW5kOiAjZjhmOGY4OyBcbn1cbmEuYnRuLmJ0bi1saW5rOmZvY3Vze1xuXHRiYWNrZ3JvdW5kOiAjZjhmOGY4O1xuXHRib3JkZXI6IG5vbmU7XG5cdGJveC1zaGFkb3c6IG5vbmU7XG59XG5cblxuXG4gXG48L3N0eWxlPlxuXG48ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgXG5cdDxoZWFkZXIgY2xhc3M9XCJuYXZiYXJcIj5cblx0XHQ8dWwgY2xhc3M9XCJuYXZiYXItbmF2IGZsZXgtcm93IG1sLW1kLWF1dG8gZC1ub25lIGQtbWQtZmxleFwiPiBcblxuXHRcdDxhIGhyZWY9XCIvYWRkXCIgY2xhc3M9XCJidG4gYnRuLWJkLWRvd25sb2FkIGQtbm9uZSBkLWxnLWlubGluZS1ibG9jayBhZGQtaXRlbVwiPlxuXHRcdFx0QWRkIFdvcmRzIFxuXHRcdDwvYT5cblx0XHQ8L3VsPlxuXHQ8L2hlYWRlcj5cblxuXG5cdDxoMSBjbGFzcz1cInRleHQtY2VudGVyIGhlYWRpbmdcIj5TcGVsbGluZyBDaGVja2VyPC9oMT5cblx0PCEtLSBJZiBhbGwgd29yZHMgYXJlIHJpZ2h0OiAtLT5cblxuXG5cdDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1zdWNjZXNzIHdvcmRzLXN0YXR1c1wiIHJvbGU9XCJhbGVydFwiPlxuXHRcdEFsbCB3b3JkcyBhcmUgY29ycmVjdCFcblx0PC9kaXY+XG5cdFx0XG5cdDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXJcIiByb2xlPVwiYWxlcnRcIj5cblx0XHQ8aDU+VGhlc2Ugd29yZHMgYXJlIG5vdCBpbiB0aGUgbGlicmFyeTo8L2g1PlxuXHRcdHtpbnB1dH1cblx0XHQ8YnI+IFxuXHRcdDxmb3JtIGFjdGlvbj1cIi9hZGRcIj5cblx0XHQ8aW5wdXQgdHlwZT1cImhpZGRlblwiIHZhbHVlPVwiU2FsYW0sIHBhcGFsYW0sIHh1eSwgcGl6ZGFcIiA+XG5cdFx0PGlucHV0IHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IHN1Ym1pdC1idG5cIiB2YWx1ZT1cIkFkZCB0aGVzZSB3b3Jkc1wiPlxuXHRcdDwvZm9ybT4gXG5cdDwvZGl2PlxuXG5cdDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPlxuXHRcdDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cC1wcmVwZW5kXCI+XG5cdFx0ICA8c3Bhbj48L3NwYW4+XG5cdFx0PC9kaXY+XG5cdFx0PHRleHRhcmVhIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgYmluZDp2YWx1ZT17aW5wdXR9IGFyaWEtbGFiZWw9XCJXaXRoIHRleHRhcmVhXCIgcGxhY2Vob2xkZXI9XCJFbnRlciB5b3VyIHRleHQgaGVyZS5cIj48L3RleHRhcmVhPlxuXHQ8L2Rpdj4gXG5cdDxkaXYgY2xhc3M9XCJidXR0b24tY29udGFpbmVyIHRleHQtY2VudGVyXCI+XG5cdFx0PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSB0ZXh0LWNlbnRlciBjaGVjay1idXR0b25cIiBvbjpjbGljaz17Y2hlY2tXb3Jkc30+Q2hlY2s8L2J1dHRvbj5cblx0PC9kaXY+XG5cblxuXG5cblx0XG5cdDwhLS0gU2hvdyBvbmx5IGlmIHdvcmRzIGFyZSBlbnRlcmVkIC0tPiBcblx0PGRpdiBpZD1cImFjY29yZGlvblwiPlxuXHRcdDxkaXYgY2xhc3M9XCJjYXJkXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY2FyZC1oZWFkZXJcIiBpZD1cImhlYWRpbmdPbmVcIj5cblx0XHRcdDxoNSBjbGFzcz1cIm1iLTBcIj5cblx0XHRcdFx0PGEgY2xhc3M9XCJidG4gYnRuLWxpbmtcIiBkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCIgZGF0YS10YXJnZXQ9XCIjY29sbGFwc2VPbmVcIiBhcmlhLWV4cGFuZGVkPVwidHJ1ZVwiIGFyaWEtY29udHJvbHM9XCJjb2xsYXBzZU9uZVwiPldvcmRzIGVudGVyZWQ6PC9hPlxuXHRcdFx0PC9oNT5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8ZGl2IGlkPVwiY29sbGFwc2VPbmVcIiBjbGFzcz1cImNvbGxhcHNlIHNob3dcIiBhcmlhLWxhYmVsbGVkYnk9XCJoZWFkaW5nT25lXCIgZGF0YS1wYXJlbnQ9XCIjYWNjb3JkaW9uXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG5cdFx0XHRcdHsjaWYgaW5wdXQubGVuZ3RoICE9IDB9XG5cdFx0XHRcdHtmb3JtYXRXb3JkcyhpbnB1dCkubWFwKCh3b3JkKSA9PiAnICcgKyB3b3JkKX1cblx0XHRcdFx0ezplbHNlfVxuXHRcdFx0XHRObyB3b3JkcyBlbnRlcmVkIHlldCFcblx0XHRcdFx0ey9pZn1cblxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0PC9kaXY+IFxuXHRcblxuXG5cbjwvZGl2PiAiLCI8c2NyaXB0PlxubGV0IGdldExldHRlcnNPbmx5ID0gKHdvcmQpID0+IHtcblx0Ly8gUmVwbGFjZSBhbGwgbm9uLW51bWVyaWMgXG5cdHJldHVybiB3b3JkLnJlcGxhY2UoL1teYS16QS1aX10vZywgJycpLnRvTG93ZXJDYXNlKCk7XG59XG5cblxuXG5sZXQgc3BsaXRXb3JkcyA9ICh3b3JkcykgPT4ge1xuXHQvLyBVc2UgcmVndWxhciBleHByZXNzaW9uIHRvIHNwbGl0IGJ5IGNvbW1hIG9yIHdoaXRlc3BhY2Vcblx0cmV0dXJuIHdvcmRzLnNwbGl0KC9bLiAsOl0rLylcblx0Ly8gcmV0dXJuIHdvcmRzLnNwbGl0KC8oPzosfCApKy8pOyAgZm91bmQgdGhpcyBvbiB0aGUgd2ViIFxufVxuXG5cbmxldCBmb3JtYXRXb3JkcyA9IChzdHIpID0+IHtcblx0cmV0dXJuIHNwbGl0V29yZHMoc3RyKS5tYXAoZ2V0TGV0dGVyc09ubHkpLmZpbHRlcihCb29sZWFuKTtcbn1cblxuXG5sZXQgY2hlY2tXb3JkcyA9ICgpID0+IHtcbiAgICAvLyBUT0RPOiBhamF4IHJlcXVlc3RcbiAgICBcbn1cblxubGV0IGlucHV0ID0gJyc7XG48L3NjcmlwdD5cbjxzdHlsZT5cbmEuYnRuLmJ0bi1saW5re1xuXHRjb2xvcjogIzAwN2JmZjtcbn1cblxuYS5idG4uYnRuLWxpbms6aG92ZXJ7XG5cdGJhY2tncm91bmQ6ICNmOGY4Zjg7XG5cbn1cblxuYS5idG4uYnRuLWxpbms6YWN0aXZle1xuXHRiYWNrZ3JvdW5kOiAjZjhmOGY4OyBcbn1cbmEuYnRuLmJ0bi1saW5rOmZvY3Vze1xuXHRiYWNrZ3JvdW5kOiAjZjhmOGY4O1xuXHRib3JkZXI6IG5vbmU7XG5cdGJveC1zaGFkb3c6IG5vbmU7XG59XG48L3N0eWxlPiAgICAgIFxuXG5cbjxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICBcbiAgICA8aGVhZGVyIGNsYXNzPVwibmF2YmFyXCI+XG4gICAgICAgIDx1bCBjbGFzcz1cIm5hdmJhci1uYXYgZmxleC1yb3cgbWwtbWQtYXV0byBkLW5vbmUgZC1tZC1mbGV4XCI+IFxuXG4gICAgICAgIDxhIGhyZWY9XCIvXCIgY2xhc3M9XCJidG4gYnRuLWJkLWRvd25sb2FkIGQtbm9uZSBkLWxnLWlubGluZS1ibG9jayBtYi0zIG1iLW1kLTAgbWwtbWQtMyBhZGQtaXRlbVwiPlxuICAgICAgICAgICAgQ2hlY2sgV29yZHNcbiAgICAgICAgPC9hPlxuICAgICAgICA8L3VsPlxuICAgIDwvaGVhZGVyPlxuXG5cbiAgICA8aDEgY2xhc3M9XCJ0ZXh0LWNlbnRlciBoZWFkaW5nXCI+QWRkIHRvIHRoZSBkaWN0aW9uYXJ5PC9oMT5cbiAgICA8IS0tIElmIGFsbCB3b3JkcyBhcmUgcmlnaHQ6IC0tPlxuXG5cbiAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtc3VjY2VzcyB3b3Jkcy1zdGF0dXNcIiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgTmV3IHdvcmRzIGFyZSBub3cgYWRkZWQhXG4gICAgPC9kaXY+XG4gICAgXG5cbiAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyIHdvcmRzLXN0YXR1c1wiIHJvbGU9XCJhbGVydFwiPlxuICAgICAgICBGYWlsZWQgdG8gYWRkIHdvcmRzISBUcnkgYWdhaW4uXG4gICAgPC9kaXY+XG5cblxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCIgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgIDxoNT5UaGVzZSB3b3JkcyBhcmUgYWxyZWFkeSBpbiB0aGUgZGljdGlvbmFyeTo8L2g1PlxuXG4gICAgICAgIFNhbGFtLCBwYXBhbGFtLCB4dXksIHBpemRhIFxuICAgIDwvZGl2PlxuXG4gICAgPGZvcm0gYWN0aW9uPVwiL1wiPlxuICAgIFxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cC1wcmVwZW5kXCI+XG4gICAgICAgICAgICA8c3Bhbj48L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz1cImZvcm0tY29udHJvbFwiIGJpbmQ6dmFsdWU9e2lucHV0fSBhcmlhLWxhYmVsPVwiV2l0aCB0ZXh0YXJlYVwiIHBsYWNlaG9sZGVyPVwiRW50ZXIgeW91ciB3b3JkcyAoc2VwZXJhdGVkIGJ5IGNvbW1hIG9yIHdoaXRlc3BhY2UpLlwiPjwvdGV4dGFyZWE+XG4gICAgICAgIDwvZGl2PiBcblxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICA8bGFiZWwgZm9yPVwiZXhhbXBsZUZvcm1Db250cm9sRmlsZTFcIj5GaWxlIHdpdGggd29yZHMgKHNlcGVyYXRlZCBieSBjb21tYSBvciB3aGl0ZXNwYWNlcyk8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgdHlwZT1cImZpbGVcIiBjbGFzcz1cImZvcm0tY29udHJvbC1maWxlXCIgaWQ9XCJleGFtcGxlRm9ybUNvbnRyb2xGaWxlMVwiPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uLWNvbnRhaW5lciB0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IHRleHQtY2VudGVyIGNoZWNrLWJ1dHRvblwiIHZhbHVlPVwiQWRkIFdvcmRzXCI+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgPC9mb3JtPlxuXG5cblxuICAgIFx0PCEtLSBTaG93IG9ubHkgaWYgd29yZHMgYXJlIGVudGVyZWQgLS0+IFxuXHQ8ZGl2IGlkPVwiYWNjb3JkaW9uXCI+XG5cdFx0PGRpdiBjbGFzcz1cImNhcmRcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjYXJkLWhlYWRlclwiIGlkPVwiaGVhZGluZ09uZVwiPlxuXHRcdFx0PGg1IGNsYXNzPVwibWItMFwiPlxuXHRcdFx0XHQ8YSBjbGFzcz1cImJ0biBidG4tbGlua1wiIGRhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIiBkYXRhLXRhcmdldD1cIiNjb2xsYXBzZU9uZVwiIGFyaWEtZXhwYW5kZWQ9XCJ0cnVlXCIgYXJpYS1jb250cm9scz1cImNvbGxhcHNlT25lXCI+V29yZHMgZW50ZXJlZDo8L2E+XG5cdFx0XHQ8L2g1PlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgaWQ9XCJjb2xsYXBzZU9uZVwiIGNsYXNzPVwiY29sbGFwc2Ugc2hvd1wiIGFyaWEtbGFiZWxsZWRieT1cImhlYWRpbmdPbmVcIiBkYXRhLXBhcmVudD1cIiNhY2NvcmRpb25cIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cblx0XHRcdFx0eyNpZiBpbnB1dC5sZW5ndGggIT0gMH1cblx0XHRcdFx0e2Zvcm1hdFdvcmRzKGlucHV0KS5tYXAoKHdvcmQpID0+ICcgJyArIHdvcmQpfVxuXHRcdFx0XHR7OmVsc2V9XG5cdFx0XHRcdE5vIHdvcmRzIGVudGVyZWQgeWV0IVxuXHRcdFx0XHR7L2lmfVxuXG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXHQ8L2Rpdj4gXG5cbiAgICBcblxuXG5cbjwvZGl2PlxuICAgIFxuICIsIjxzY3JpcHQgY29udGV4dD1cIm1vZHVsZVwiPlxuXHRleHBvcnQgZnVuY3Rpb24gcHJlbG9hZCh7IHBhcmFtcywgcXVlcnkgfSkge1xuXHRcdHJldHVybiB0aGlzLmZldGNoKGBibG9nLmpzb25gKS50aGVuKHIgPT4gci5qc29uKCkpLnRoZW4ocG9zdHMgPT4ge1xuXHRcdFx0cmV0dXJuIHsgcG9zdHMgfTtcblx0XHR9KTtcblx0fVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG5cdGV4cG9ydCBsZXQgcG9zdHM7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuXHR1bCB7XG5cdFx0bWFyZ2luOiAwIDAgMWVtIDA7XG5cdFx0bGluZS1oZWlnaHQ6IDEuNTtcblx0fVxuPC9zdHlsZT5cblxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+QmxvZzwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48aDE+UmVjZW50IHBvc3RzPC9oMT5cblxuPHVsPlxuXHR7I2VhY2ggcG9zdHMgYXMgcG9zdH1cblx0XHQ8IS0tIHdlJ3JlIHVzaW5nIHRoZSBub24tc3RhbmRhcmQgYHJlbD1wcmVmZXRjaGAgYXR0cmlidXRlIHRvXG5cdFx0XHRcdHRlbGwgU2FwcGVyIHRvIGxvYWQgdGhlIGRhdGEgZm9yIHRoZSBwYWdlIGFzIHNvb24gYXNcblx0XHRcdFx0dGhlIHVzZXIgaG92ZXJzIG92ZXIgdGhlIGxpbmsgb3IgdGFwcyBpdCwgaW5zdGVhZCBvZlxuXHRcdFx0XHR3YWl0aW5nIGZvciB0aGUgJ2NsaWNrJyBldmVudCAtLT5cblx0XHQ8bGk+PGEgcmVsPSdwcmVmZXRjaCcgaHJlZj0nYmxvZy97cG9zdC5zbHVnfSc+e3Bvc3QudGl0bGV9PC9hPjwvbGk+XG5cdHsvZWFjaH1cbjwvdWw+IiwiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG5cdGV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVsb2FkKHsgcGFyYW1zLCBxdWVyeSB9KSB7XG5cdFx0Ly8gdGhlIGBzbHVnYCBwYXJhbWV0ZXIgaXMgYXZhaWxhYmxlIGJlY2F1c2Vcblx0XHQvLyB0aGlzIGZpbGUgaXMgY2FsbGVkIFtzbHVnXS5zdmVsdGVcblx0XHRjb25zdCByZXMgPSBhd2FpdCB0aGlzLmZldGNoKGBibG9nLyR7cGFyYW1zLnNsdWd9Lmpzb25gKTtcblx0XHRjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcblxuXHRcdGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcblx0XHRcdHJldHVybiB7IHBvc3Q6IGRhdGEgfTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5lcnJvcihyZXMuc3RhdHVzLCBkYXRhLm1lc3NhZ2UpO1xuXHRcdH1cblx0fVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG5cdGV4cG9ydCBsZXQgcG9zdDtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG5cdC8qXG5cdFx0QnkgZGVmYXVsdCwgQ1NTIGlzIGxvY2FsbHkgc2NvcGVkIHRvIHRoZSBjb21wb25lbnQsXG5cdFx0YW5kIGFueSB1bnVzZWQgc3R5bGVzIGFyZSBkZWFkLWNvZGUtZWxpbWluYXRlZC5cblx0XHRJbiB0aGlzIHBhZ2UsIFN2ZWx0ZSBjYW4ndCBrbm93IHdoaWNoIGVsZW1lbnRzIGFyZVxuXHRcdGdvaW5nIHRvIGFwcGVhciBpbnNpZGUgdGhlIHt7e3Bvc3QuaHRtbH19fSBibG9jayxcblx0XHRzbyB3ZSBoYXZlIHRvIHVzZSB0aGUgOmdsb2JhbCguLi4pIG1vZGlmaWVyIHRvIHRhcmdldFxuXHRcdGFsbCBlbGVtZW50cyBpbnNpZGUgLmNvbnRlbnRcblx0Ki9cblx0LmNvbnRlbnQgOmdsb2JhbChoMikge1xuXHRcdGZvbnQtc2l6ZTogMS40ZW07XG5cdFx0Zm9udC13ZWlnaHQ6IDUwMDtcblx0fVxuXG5cdC5jb250ZW50IDpnbG9iYWwocHJlKSB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogI2Y5ZjlmOTtcblx0XHRib3gtc2hhZG93OiBpbnNldCAxcHggMXB4IDVweCByZ2JhKDAsMCwwLDAuMDUpO1xuXHRcdHBhZGRpbmc6IDAuNWVtO1xuXHRcdGJvcmRlci1yYWRpdXM6IDJweDtcblx0XHRvdmVyZmxvdy14OiBhdXRvO1xuXHR9XG5cblx0LmNvbnRlbnQgOmdsb2JhbChwcmUpIDpnbG9iYWwoY29kZSkge1xuXHRcdGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuXHRcdHBhZGRpbmc6IDA7XG5cdH1cblxuXHQuY29udGVudCA6Z2xvYmFsKHVsKSB7XG5cdFx0bGluZS1oZWlnaHQ6IDEuNTtcblx0fVxuXG5cdC5jb250ZW50IDpnbG9iYWwobGkpIHtcblx0XHRtYXJnaW46IDAgMCAwLjVlbSAwO1xuXHR9XG48L3N0eWxlPlxuXG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT57cG9zdC50aXRsZX08L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPGgxPntwb3N0LnRpdGxlfTwvaDE+XG5cbjxkaXYgY2xhc3M9J2NvbnRlbnQnPlxuXHR7QGh0bWwgcG9zdC5odG1sfVxuPC9kaXY+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUMsRUFBRSxlQUFJLENBQUMsQUFDTixNQUFNLENBQUUsQ0FBQyxDQUFDLElBQUksQUFDZixDQUFDLEFBRUQsRUFBRSxlQUFDLENBQUMsQUFDSCxTQUFTLENBQUUsS0FBSyxDQUNoQixXQUFXLENBQUUsR0FBRyxDQUNoQixNQUFNLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxBQUNwQixDQUFDLEFBTUQsTUFBTSxBQUFDLFlBQVksS0FBSyxDQUFDLEFBQUMsQ0FBQyxBQUMxQixFQUFFLGVBQUMsQ0FBQyxBQUNILFNBQVMsQ0FBRSxHQUFHLEFBQ2YsQ0FBQyxBQUNGLENBQUMsQUFFRCx5QkFBVSxDQUFDLEFBQ1YsVUFBVSxDQUFFLEtBQUssQUFDbEIsQ0FBQztBQ0dGLENBQUMsSUFBSSx3QkFBUyxDQUFDLEFBQ2QsS0FBSyxDQUFFLE9BQU8sQUFDZixDQUFDLEFBRUQsQ0FBQyxJQUFJLHdCQUFTLE1BQU0sQ0FBQyxBQUNwQixVQUFVLENBQUUsT0FBTyxBQUVwQixDQUFDLEFBRUQsQ0FBQyxJQUFJLHdCQUFTLE9BQU8sQ0FBQyxBQUNyQixVQUFVLENBQUUsT0FBTyxBQUNwQixDQUFDLEFBQ0QsQ0FBQyxJQUFJLHdCQUFTLE1BQU0sQ0FBQyxBQUNwQixVQUFVLENBQUUsT0FBTyxDQUNuQixNQUFNLENBQUUsSUFBSSxDQUNaLFVBQVUsQ0FBRSxJQUFJLEFBQ2pCLENBQUM7QUNyQkQsQ0FBQyxJQUFJLHdCQUFTLENBQUMsQUFDZCxLQUFLLENBQUUsT0FBTyxBQUNmLENBQUMsQUFFRCxDQUFDLElBQUksd0JBQVMsTUFBTSxDQUFDLEFBQ3BCLFVBQVUsQ0FBRSxPQUFPLEFBRXBCLENBQUMsQUFFRCxDQUFDLElBQUksd0JBQVMsT0FBTyxDQUFDLEFBQ3JCLFVBQVUsQ0FBRSxPQUFPLEFBQ3BCLENBQUMsQUFDRCxDQUFDLElBQUksd0JBQVMsTUFBTSxDQUFDLEFBQ3BCLFVBQVUsQ0FBRSxPQUFPLENBQ25CLE1BQU0sQ0FBRSxJQUFJLENBQ1osVUFBVSxDQUFFLElBQUksQUFDakIsQ0FBQztBQy9CQSxFQUFFLGVBQUMsQ0FBQyxBQUNILE1BQU0sQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ2pCLFdBQVcsQ0FBRSxHQUFHLEFBQ2pCLENBQUM7QUNZRCxzQkFBUSxDQUFDLEFBQVEsRUFBRSxBQUFFLENBQUMsQUFDckIsU0FBUyxDQUFFLEtBQUssQ0FDaEIsV0FBVyxDQUFFLEdBQUcsQUFDakIsQ0FBQyxBQUVELHNCQUFRLENBQUMsQUFBUSxHQUFHLEFBQUUsQ0FBQyxBQUN0QixnQkFBZ0IsQ0FBRSxPQUFPLENBQ3pCLFVBQVUsQ0FBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDOUMsT0FBTyxDQUFFLEtBQUssQ0FDZCxhQUFhLENBQUUsR0FBRyxDQUNsQixVQUFVLENBQUUsSUFBSSxBQUNqQixDQUFDLEFBRUQsc0JBQVEsQ0FBQyxBQUFRLEdBQUcsQUFBQyxDQUFDLEFBQVEsSUFBSSxBQUFFLENBQUMsQUFDcEMsZ0JBQWdCLENBQUUsV0FBVyxDQUM3QixPQUFPLENBQUUsQ0FBQyxBQUNYLENBQUMsQUFFRCxzQkFBUSxDQUFDLEFBQVEsRUFBRSxBQUFFLENBQUMsQUFDckIsV0FBVyxDQUFFLEdBQUcsQUFDakIsQ0FBQyxBQUVELHNCQUFRLENBQUMsQUFBUSxFQUFFLEFBQUUsQ0FBQyxBQUNyQixNQUFNLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxBQUNwQixDQUFDIn0= */