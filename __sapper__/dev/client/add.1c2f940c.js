import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, e as element, t as text, c as claim_element, a as children, b as claim_text, f as detach_dev, h as attr_dev, j as add_location, k as insert_dev, l as append_dev, m as add_render_callback, n as create_bidirectional_transition, o as space, p as claim_space, u as set_input_value, w as listen_dev, x as transition_in, y as transition_out, C as noop, q as set_data_dev } from './client.c769c715.js';
import { s as slide, f as fade } from './index.93872cf8.js';

/* src/routes/add.svelte generated by Svelte v3.23.2 */
const file = "src/routes/add.svelte";

// (65:4) {#if wordsSuccess}
function create_if_block_2(ctx) {
	let div;
	let t;
	let div_transition;
	let current;

	const block = {
		c: function create() {
			div = element("div");
			t = text("New words are now added!");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, role: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, "New words are now added!");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "alert alert-success words-status");
			attr_dev(div, "role", "alert");
			add_location(div, file, 65, 4, 1283);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
			current = true;
		},
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, true);
				div_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, false);
			div_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching && div_transition) div_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(65:4) {#if wordsSuccess}",
		ctx
	});

	return block;
}

// (71:4) {#if wordsFail}
function create_if_block_1(ctx) {
	let div;
	let t;
	let div_transition;
	let current;

	const block = {
		c: function create() {
			div = element("div");
			t = text("Failed to add words! Try again.");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, role: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, "Failed to add words! Try again.");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "alert alert-danger words-status");
			attr_dev(div, "role", "alert");
			add_location(div, file, 71, 8, 1442);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
			current = true;
		},
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, true);
				div_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, false);
			div_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching && div_transition) div_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(71:4) {#if wordsFail}",
		ctx
	});

	return block;
}

// (118:4) {:else}
function create_else_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("No words entered yet!");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "No words entered yet!");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(118:4) {:else}",
		ctx
	});

	return block;
}

// (116:4) {#if input.length != 0}
function create_if_block(ctx) {
	let t_value = /*formatWords*/ ctx[3](/*input*/ ctx[0]).map(func) + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*input*/ 1 && t_value !== (t_value = /*formatWords*/ ctx[3](/*input*/ ctx[0]).map(func) + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(116:4) {#if input.length != 0}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div9;
	let header;
	let ul;
	let a0;
	let t0;
	let t1;
	let h1;
	let t2;
	let t3;
	let t4;
	let t5;
	let form;
	let div1;
	let div0;
	let span;
	let t6;
	let textarea;
	let t7;
	let div2;
	let label;
	let t8;
	let t9;
	let input0;
	let t10;
	let div3;
	let input1;
	let t11;
	let div8;
	let div7;
	let div4;
	let h5;
	let a1;
	let t12;
	let t13;
	let div6;
	let div5;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*wordsSuccess*/ ctx[1] && create_if_block_2(ctx);
	let if_block1 = /*wordsFail*/ ctx[2] && create_if_block_1(ctx);

	function select_block_type(ctx, dirty) {
		if (/*input*/ ctx[0].length != 0) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block2 = current_block_type(ctx);

	const block = {
		c: function create() {
			div9 = element("div");
			header = element("header");
			ul = element("ul");
			a0 = element("a");
			t0 = text("Check Words");
			t1 = space();
			h1 = element("h1");
			t2 = text("Add to the dictionary");
			t3 = space();
			if (if_block0) if_block0.c();
			t4 = space();
			if (if_block1) if_block1.c();
			t5 = space();
			form = element("form");
			div1 = element("div");
			div0 = element("div");
			span = element("span");
			t6 = space();
			textarea = element("textarea");
			t7 = space();
			div2 = element("div");
			label = element("label");
			t8 = text("File with words (seperated by comma or whitespaces)");
			t9 = space();
			input0 = element("input");
			t10 = space();
			div3 = element("div");
			input1 = element("input");
			t11 = space();
			div8 = element("div");
			div7 = element("div");
			div4 = element("div");
			h5 = element("h5");
			a1 = element("a");
			t12 = text("Words entered:");
			t13 = space();
			div6 = element("div");
			div5 = element("div");
			if_block2.c();
			this.h();
		},
		l: function claim(nodes) {
			div9 = claim_element(nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			header = claim_element(div9_nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			ul = claim_element(header_nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			a0 = claim_element(ul_nodes, "A", { href: true, class: true });
			var a0_nodes = children(a0);
			t0 = claim_text(a0_nodes, "Check Words");
			a0_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			header_nodes.forEach(detach_dev);
			t1 = claim_space(div9_nodes);
			h1 = claim_element(div9_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t2 = claim_text(h1_nodes, "Add to the dictionary");
			h1_nodes.forEach(detach_dev);
			t3 = claim_space(div9_nodes);
			if (if_block0) if_block0.l(div9_nodes);
			t4 = claim_space(div9_nodes);
			if (if_block1) if_block1.l(div9_nodes);
			t5 = claim_space(div9_nodes);
			form = claim_element(div9_nodes, "FORM", { action: true });
			var form_nodes = children(form);
			div1 = claim_element(form_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			span = claim_element(div0_nodes, "SPAN", {});
			children(span).forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t6 = claim_space(div1_nodes);

			textarea = claim_element(div1_nodes, "TEXTAREA", {
				class: true,
				"aria-label": true,
				placeholder: true
			});

			children(textarea).forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t7 = claim_space(form_nodes);
			div2 = claim_element(form_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			label = claim_element(div2_nodes, "LABEL", { for: true });
			var label_nodes = children(label);
			t8 = claim_text(label_nodes, "File with words (seperated by comma or whitespaces)");
			label_nodes.forEach(detach_dev);
			t9 = claim_space(div2_nodes);
			input0 = claim_element(div2_nodes, "INPUT", { type: true, class: true, id: true });
			div2_nodes.forEach(detach_dev);
			t10 = claim_space(form_nodes);
			div3 = claim_element(form_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			input1 = claim_element(div3_nodes, "INPUT", { type: true, class: true, value: true });
			div3_nodes.forEach(detach_dev);
			form_nodes.forEach(detach_dev);
			t11 = claim_space(div9_nodes);
			div8 = claim_element(div9_nodes, "DIV", { id: true });
			var div8_nodes = children(div8);
			div7 = claim_element(div8_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			div4 = claim_element(div7_nodes, "DIV", { class: true, id: true });
			var div4_nodes = children(div4);
			h5 = claim_element(div4_nodes, "H5", { class: true });
			var h5_nodes = children(h5);

			a1 = claim_element(h5_nodes, "A", {
				class: true,
				"data-toggle": true,
				"data-target": true,
				"aria-expanded": true,
				"aria-controls": true
			});

			var a1_nodes = children(a1);
			t12 = claim_text(a1_nodes, "Words entered:");
			a1_nodes.forEach(detach_dev);
			h5_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			t13 = claim_space(div7_nodes);

			div6 = claim_element(div7_nodes, "DIV", {
				id: true,
				class: true,
				"aria-labelledby": true,
				"data-parent": true
			});

			var div6_nodes = children(div6);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			if_block2.l(div5_nodes);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			div7_nodes.forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			div9_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a0, "href", "/");
			attr_dev(a0, "class", "btn btn-bd-download d-none d-lg-inline-block mb-3 mb-md-0 ml-md-3 add-item");
			add_location(a0, file, 54, 8, 992);
			attr_dev(ul, "class", "navbar-nav flex-row ml-md-auto d-none d-md-flex");
			add_location(ul, file, 52, 8, 921);
			attr_dev(header, "class", "navbar");
			add_location(header, file, 51, 4, 889);
			attr_dev(h1, "class", "text-center heading");
			add_location(h1, file, 61, 4, 1159);
			add_location(span, file, 86, 12, 1872);
			attr_dev(div0, "class", "input-group-prepend");
			add_location(div0, file, 85, 12, 1826);
			attr_dev(textarea, "class", "form-control");
			attr_dev(textarea, "aria-label", "With textarea");
			attr_dev(textarea, "placeholder", "Enter your words (seperated by comma or whitespace).");
			add_location(textarea, file, 88, 12, 1917);
			attr_dev(div1, "class", "input-group");
			add_location(div1, file, 84, 8, 1788);
			attr_dev(label, "for", "exampleFormControlFile1");
			add_location(label, file, 92, 8, 2131);
			attr_dev(input0, "type", "file");
			attr_dev(input0, "class", "form-control-file");
			attr_dev(input0, "id", "exampleFormControlFile1");
			add_location(input0, file, 93, 8, 2236);
			attr_dev(div2, "class", "form-group");
			add_location(div2, file, 91, 8, 2098);
			attr_dev(input1, "type", "submit");
			attr_dev(input1, "class", "btn btn-outline-primary text-center check-button");
			input1.value = "Add Words";
			add_location(input1, file, 97, 12, 2390);
			attr_dev(div3, "class", "button-container text-center");
			add_location(div3, file, 96, 8, 2335);
			attr_dev(form, "action", "/");
			add_location(form, file, 82, 4, 1757);
			attr_dev(a1, "class", "btn btn-link svelte-1q1ggqx");
			attr_dev(a1, "data-toggle", "collapse");
			attr_dev(a1, "data-target", "#collapseOne");
			attr_dev(a1, "aria-expanded", "true");
			attr_dev(a1, "aria-controls", "collapseOne");
			add_location(a1, file, 109, 4, 2677);
			attr_dev(h5, "class", "mb-0");
			add_location(h5, file, 108, 3, 2655);
			attr_dev(div4, "class", "card-header");
			attr_dev(div4, "id", "headingOne");
			add_location(div4, file, 107, 3, 2610);
			attr_dev(div5, "class", "card-body");
			add_location(div5, file, 114, 3, 2944);
			attr_dev(div6, "id", "collapseOne");
			attr_dev(div6, "class", "collapse show");
			attr_dev(div6, "aria-labelledby", "headingOne");
			attr_dev(div6, "data-parent", "#accordion");
			add_location(div6, file, 113, 3, 2842);
			attr_dev(div7, "class", "card");
			add_location(div7, file, 106, 2, 2588);
			attr_dev(div8, "id", "accordion");
			add_location(div8, file, 105, 1, 2565);
			attr_dev(div9, "class", "container");
			add_location(div9, file, 49, 0, 856);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div9, anchor);
			append_dev(div9, header);
			append_dev(header, ul);
			append_dev(ul, a0);
			append_dev(a0, t0);
			append_dev(div9, t1);
			append_dev(div9, h1);
			append_dev(h1, t2);
			append_dev(div9, t3);
			if (if_block0) if_block0.m(div9, null);
			append_dev(div9, t4);
			if (if_block1) if_block1.m(div9, null);
			append_dev(div9, t5);
			append_dev(div9, form);
			append_dev(form, div1);
			append_dev(div1, div0);
			append_dev(div0, span);
			append_dev(div1, t6);
			append_dev(div1, textarea);
			set_input_value(textarea, /*input*/ ctx[0]);
			append_dev(form, t7);
			append_dev(form, div2);
			append_dev(div2, label);
			append_dev(label, t8);
			append_dev(div2, t9);
			append_dev(div2, input0);
			append_dev(form, t10);
			append_dev(form, div3);
			append_dev(div3, input1);
			append_dev(div9, t11);
			append_dev(div9, div8);
			append_dev(div8, div7);
			append_dev(div7, div4);
			append_dev(div4, h5);
			append_dev(h5, a1);
			append_dev(a1, t12);
			append_dev(div7, t13);
			append_dev(div7, div6);
			append_dev(div6, div5);
			if_block2.m(div5, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[4]);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*input*/ 1) {
				set_input_value(textarea, /*input*/ ctx[0]);
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block2) {
				if_block2.p(ctx, dirty);
			} else {
				if_block2.d(1);
				if_block2 = current_block_type(ctx);

				if (if_block2) {
					if_block2.c();
					if_block2.m(div5, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div9);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if_block2.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const func = word => " " + word;

function instance($$self, $$props, $$invalidate) {
	let input = "";
	let wordsSuccess = false;
	let wordsFail = false;

	let getLettersOnly = word => {
		// Replace all non-numeric 
		return word.replace(/[^a-zA-Z_]/g, "").toLowerCase();
	};

	let splitWords = words => {
		// Use regular expression to split by comma or whitespace
		return words.split(/[. ,:]+/);
	}; // return words.split(/(?:,| )+/);  found this on the web 

	let formatWords = str => {
		return splitWords(str).map(getLettersOnly).filter(Boolean);
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Add> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Add", $$slots, []);

	function textarea_input_handler() {
		input = this.value;
		$$invalidate(0, input);
	}

	$$self.$capture_state = () => ({
		slide,
		fade,
		input,
		wordsSuccess,
		wordsFail,
		getLettersOnly,
		splitWords,
		formatWords,
		formatted_words,
		words_json
	});

	$$self.$inject_state = $$props => {
		if ("input" in $$props) $$invalidate(0, input = $$props.input);
		if ("wordsSuccess" in $$props) $$invalidate(1, wordsSuccess = $$props.wordsSuccess);
		if ("wordsFail" in $$props) $$invalidate(2, wordsFail = $$props.wordsFail);
		if ("getLettersOnly" in $$props) getLettersOnly = $$props.getLettersOnly;
		if ("splitWords" in $$props) splitWords = $$props.splitWords;
		if ("formatWords" in $$props) $$invalidate(3, formatWords = $$props.formatWords);
		if ("formatted_words" in $$props) $$invalidate(5, formatted_words = $$props.formatted_words);
		if ("words_json" in $$props) words_json = $$props.words_json;
	};

	let formatted_words;
	let words_json;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*input*/ 1) {
			 $$invalidate(5, formatted_words = formatWords(input));
		}

		if ($$self.$$.dirty & /*formatted_words*/ 32) {
			 words_json = { "words": formatted_words };
		}
	};

	return [input, wordsSuccess, wordsFail, formatWords, textarea_input_handler];
}

class Add extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Add",
			options,
			id: create_fragment.name
		});
	}
}

export default Add;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLjFjMmY5NDBjLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL2FkZC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbmltcG9ydCB7c2xpZGUsIGZhZGV9IGZyb20gXCJzdmVsdGUvdHJhbnNpdGlvblwiO1xuXG5sZXQgaW5wdXQgPSAnJztcbmxldCB3b3Jkc1N1Y2Nlc3MgPSBmYWxzZTtcbmxldCB3b3Jkc0ZhaWwgPSBmYWxzZTtcblxubGV0IGdldExldHRlcnNPbmx5ID0gKHdvcmQpID0+IHtcblx0Ly8gUmVwbGFjZSBhbGwgbm9uLW51bWVyaWMgXG5cdHJldHVybiB3b3JkLnJlcGxhY2UoL1teYS16QS1aX10vZywgJycpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmxldCBzcGxpdFdvcmRzID0gKHdvcmRzKSA9PiB7XG5cdC8vIFVzZSByZWd1bGFyIGV4cHJlc3Npb24gdG8gc3BsaXQgYnkgY29tbWEgb3Igd2hpdGVzcGFjZVxuXHRyZXR1cm4gd29yZHMuc3BsaXQoL1suICw6XSsvKVxuXHQvLyByZXR1cm4gd29yZHMuc3BsaXQoLyg/Oix8ICkrLyk7ICBmb3VuZCB0aGlzIG9uIHRoZSB3ZWIgXG59XG5cblxubGV0IGZvcm1hdFdvcmRzID0gKHN0cikgPT4ge1xuXHRyZXR1cm4gc3BsaXRXb3JkcyhzdHIpLm1hcChnZXRMZXR0ZXJzT25seSkuZmlsdGVyKEJvb2xlYW4pO1xufVxuJDogZm9ybWF0dGVkX3dvcmRzID0gZm9ybWF0V29yZHMoaW5wdXQpO1xuXG4kOiB3b3Jkc19qc29uID0ge1wid29yZHNcIiA6IGZvcm1hdHRlZF93b3Jkc307XG5cbiBcbjwvc2NyaXB0PlxuPHN0eWxlPlxuYS5idG4uYnRuLWxpbmt7XG5cdGNvbG9yOiAjMDA3YmZmO1xufVxuXG5hLmJ0bi5idG4tbGluazpob3Zlcntcblx0YmFja2dyb3VuZDogI2Y4ZjhmODtcblxufVxuXG5hLmJ0bi5idG4tbGluazphY3RpdmV7XG5cdGJhY2tncm91bmQ6ICNmOGY4Zjg7IFxufVxuYS5idG4uYnRuLWxpbms6Zm9jdXN7XG5cdGJhY2tncm91bmQ6ICNmOGY4Zjg7XG5cdGJvcmRlcjogbm9uZTtcblx0Ym94LXNoYWRvdzogbm9uZTtcbn1cbjwvc3R5bGU+ICAgICAgXG5cblxuPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgIFxuICAgIDxoZWFkZXIgY2xhc3M9XCJuYXZiYXJcIj5cbiAgICAgICAgPHVsIGNsYXNzPVwibmF2YmFyLW5hdiBmbGV4LXJvdyBtbC1tZC1hdXRvIGQtbm9uZSBkLW1kLWZsZXhcIj4gXG5cbiAgICAgICAgPGEgaHJlZj1cIi9cIiBjbGFzcz1cImJ0biBidG4tYmQtZG93bmxvYWQgZC1ub25lIGQtbGctaW5saW5lLWJsb2NrIG1iLTMgbWItbWQtMCBtbC1tZC0zIGFkZC1pdGVtXCI+XG4gICAgICAgICAgICBDaGVjayBXb3Jkc1xuICAgICAgICA8L2E+XG4gICAgICAgIDwvdWw+XG4gICAgPC9oZWFkZXI+XG5cblxuICAgIDxoMSBjbGFzcz1cInRleHQtY2VudGVyIGhlYWRpbmdcIj5BZGQgdG8gdGhlIGRpY3Rpb25hcnk8L2gxPlxuICAgIDwhLS0gSWYgYWxsIHdvcmRzIGFyZSByaWdodDogLS0+XG5cbiAgICB7I2lmIHdvcmRzU3VjY2Vzc31cbiAgICA8ZGl2IHRyYW5zaXRpb246ZmFkZSBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3Mgd29yZHMtc3RhdHVzXCIgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgIE5ldyB3b3JkcyBhcmUgbm93IGFkZGVkIVxuICAgIDwvZGl2PlxuICAgIHsvaWZ9XG5cbiAgICB7I2lmIHdvcmRzRmFpbH1cbiAgICAgICAgPGRpdiB0cmFuc2l0aW9uOmZhZGUgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgd29yZHMtc3RhdHVzXCIgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgICBGYWlsZWQgdG8gYWRkIHdvcmRzISBUcnkgYWdhaW4uXG4gICAgICAgIDwvZGl2PlxuICAgIHsvaWZ9XG5cbiAgICA8IS0tIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCIgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgIDxoNT5UaGVzZSB3b3JkcyBhcmUgYWxyZWFkeSBpbiB0aGUgZGljdGlvbmFyeTo8L2g1PlxuXG4gICAgICAgIFNhbGFtLCBwYXBhbGFtLCB4dXksIHBpemRhIFxuICAgIDwvZGl2PiAtLT5cblxuICAgIDxmb3JtIGFjdGlvbj1cIi9cIj5cbiAgICBcbiAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAtcHJlcGVuZFwiPlxuICAgICAgICAgICAgPHNwYW4+PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBiaW5kOnZhbHVlPXtpbnB1dH0gYXJpYS1sYWJlbD1cIldpdGggdGV4dGFyZWFcIiBwbGFjZWhvbGRlcj1cIkVudGVyIHlvdXIgd29yZHMgKHNlcGVyYXRlZCBieSBjb21tYSBvciB3aGl0ZXNwYWNlKS5cIj48L3RleHRhcmVhPlxuICAgICAgICA8L2Rpdj4gXG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgPGxhYmVsIGZvcj1cImV4YW1wbGVGb3JtQ29udHJvbEZpbGUxXCI+RmlsZSB3aXRoIHdvcmRzIChzZXBlcmF0ZWQgYnkgY29tbWEgb3Igd2hpdGVzcGFjZXMpPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wtZmlsZVwiIGlkPVwiZXhhbXBsZUZvcm1Db250cm9sRmlsZTFcIj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJ1dHRvbi1jb250YWluZXIgdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSB0ZXh0LWNlbnRlciBjaGVjay1idXR0b25cIiB2YWx1ZT1cIkFkZCBXb3Jkc1wiPlxuICAgICAgICA8L2Rpdj5cblxuICAgIDwvZm9ybT5cblxuXG5cbiAgICBcdDwhLS0gU2hvdyBvbmx5IGlmIHdvcmRzIGFyZSBlbnRlcmVkIC0tPiBcblx0PGRpdiBpZD1cImFjY29yZGlvblwiPlxuXHRcdDxkaXYgY2xhc3M9XCJjYXJkXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY2FyZC1oZWFkZXJcIiBpZD1cImhlYWRpbmdPbmVcIj5cblx0XHRcdDxoNSBjbGFzcz1cIm1iLTBcIj5cblx0XHRcdFx0PGEgY2xhc3M9XCJidG4gYnRuLWxpbmtcIiBkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCIgZGF0YS10YXJnZXQ9XCIjY29sbGFwc2VPbmVcIiBhcmlhLWV4cGFuZGVkPVwidHJ1ZVwiIGFyaWEtY29udHJvbHM9XCJjb2xsYXBzZU9uZVwiPldvcmRzIGVudGVyZWQ6PC9hPlxuXHRcdFx0PC9oNT5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8ZGl2IGlkPVwiY29sbGFwc2VPbmVcIiBjbGFzcz1cImNvbGxhcHNlIHNob3dcIiBhcmlhLWxhYmVsbGVkYnk9XCJoZWFkaW5nT25lXCIgZGF0YS1wYXJlbnQ9XCIjYWNjb3JkaW9uXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG5cdFx0XHRcdHsjaWYgaW5wdXQubGVuZ3RoICE9IDB9XG5cdFx0XHRcdHtmb3JtYXRXb3JkcyhpbnB1dCkubWFwKCh3b3JkKSA9PiAnICcgKyB3b3JkKX1cblx0XHRcdFx0ezplbHNlfVxuXHRcdFx0XHRObyB3b3JkcyBlbnRlcmVkIHlldCFcblx0XHRcdFx0ey9pZn1cblxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0PC9kaXY+IFxuXG4gICAgXG5cblxuXG48L2Rpdj5cbiAgICBcbiAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQkFvSEssR0FBVyxjQUFDLEdBQUssS0FBRSxHQUFHOzs7Ozs7Ozs7Ozs7OztxRUFBdEIsR0FBVyxjQUFDLEdBQUssS0FBRSxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tDQXBEbEIsR0FBWTsrQkFNWixHQUFTOzs7Z0JBNkNULEdBQUssSUFBQyxNQUFNLElBQUksQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3VDQTNCNkIsR0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dDQUFMLEdBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2FBNEIvQixJQUFJLElBQUssR0FBRyxHQUFHLElBQUk7OztLQWpINUMsS0FBSyxHQUFHLEVBQUU7S0FDVixZQUFZLEdBQUcsS0FBSztLQUNwQixTQUFTLEdBQUcsS0FBSzs7S0FFakIsY0FBYyxHQUFJLElBQUk7O1NBRWxCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLEVBQUUsRUFBRSxXQUFXOzs7S0FHL0MsVUFBVSxHQUFJLEtBQUs7O1NBRWYsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTOzs7S0FLekIsV0FBVyxHQUFJLEdBQUc7U0FDZCxVQUFVLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLE9BQU87Ozs7Ozs7Ozs7Ozs7RUFvRUgsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFsRXpELGVBQWUsR0FBRyxXQUFXLENBQUMsS0FBSzs7OztJQUVuQyxVQUFVLEtBQUksT0FBTyxFQUFHLGVBQWU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
